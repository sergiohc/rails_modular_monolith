services:
  localstack:
    container_name: localstack
    image: localstack/localstack
    healthcheck:
      test: awslocal sns list-topics && awslocal sqs list-queues
      interval: 3s
      timeout: 10s
    environment:
      - AWS_DEFAULT_REGION=eu-west-1
      - LOCALSTACK_HOST=localstack
  ollama:
    image: ollama/ollama
    restart: on-failure
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    ports:
      - 11434:11434
    volumes:
      - ollama:/root/.ollama
    command: "serve"
  zookeeper:
    image: debezium/zookeeper:1.9
    restart: on-failure
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  kafka:
    image: debezium/kafka:1.9
    restart: on-failure
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:9092"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 40s
    # volumes:
    #   - kafka:/kafka/data
  connect:
    image: debezium/connect:1.9
    restart: on-failure
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8083"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 40s
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_started
  web:
    build: .
    entrypoint: >
      bash -c "
      bin/rails db:create db:migrate assets:precompile
      && rm -f tmp/pids/server.pid
      && bundle exec rails s -b 0.0.0.0"
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_HOST=db
      - PG_PORT=5432
      - PRODUCER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONNECT_DB_SERVER_NAME=dbserver
      - KAFKA_CONNECT=connect:8083
      - SETUP_KAFKA_CONNECTOR=true
    restart: on-failure
    ports:
      - ${RAILS_PORT-3000}:3000
    volumes:
      - .:/rails
    depends_on:
      ollama:
        condition: service_started
      db:
        condition: service_started
      zookeeper:
        condition: service_started
      kafka:
        condition: service_started
      connect:
        condition: service_healthy
  web_only:
    build: .
    entrypoint: >
      bash -c "
      bin/rails db:create db:migrate
      && rm -f tmp/pids/server.pid
      && bin/rails s -b 0.0.0.0"
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_HOST=db
      - PRODUCER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONNECT_DB_SERVER_NAME=dbserver
      - KAFKA_CONNECT=connect:8083
      - SETUP_KAFKA_CONNECTOR=true
    restart: on-failure
    profiles: ["web_only"]
    ports:
      - ${RAILS_PORT-3000}:3000
    volumes:
      - .:/rails
    depends_on:
      db:
        condition: service_started
  karafka:
    build: .
    stdin_open: true
    tty: true
    entrypoint: >
      bash -c "bundle exec karafka s"
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_HOST=db
      - PG_PORT=5432
      - PRODUCER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONNECT_DB_SERVER_NAME=dbserver
      - KAFKA_CONNECT=connect:8083
    restart: on-failure
    volumes:
      - .:/rails
    depends_on:
      - web
  karafka-web:
    build: .
    stdin_open: true
    tty: true
    restart: on-failure
    entrypoint: >
      bash -c "bundle exec karafka-web install && bundle exec rackup karafka_web.ru --host '0.0.0.0'"
    environment:
      - PG_USER=postgres
      - PG_PASSWORD=postgres
      - PG_HOST=db
      - PG_PORT=5432
      - PRODUCER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CONNECT_DB_SERVER_NAME=dbserver
      - KAFKA_CONNECT=connect:8083
    ports:
      - 9292:9292
    volumes:
      - .:/rails
    depends_on:
      - karafka
  mailcatcher:
    image: schickling/mailcatcher
    restart: unless-stopped
    ports:
      - 1025:1025
      - 1080:1080
  db:
    image: pgvector/pgvector:pg16
    # allow host
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - db_data3:/var/lib/postgresql/data
    restart: on-failure
    ports:
      - 5432:5432
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
  pgadmin4:
      image: elestio/pgadmin:latest
      restart: always
      environment:
        - PGADMIN_DEFAULT_EMAIL=${PG_ADMIN_EMAIL:-admin@example.com}
        - PGADMIN_DEFAULT_PASSWORD=${PG_ADMIN_PASSWORD:-password}
        - PGADMIN_LISTEN_PORT=${PG_ADMIN_PORT:-8080}
      depends_on:
        db:
          condition: service_started
      ports:
        - "${PG_ADMIN_PORT:-8080}:${PG_ADMIN_PORT:-8080}"
      volumes:
        - pg_admin:/pgadmin4

volumes:
  db_data3:
  ollama:
  pg_admin:
  # kafka:
