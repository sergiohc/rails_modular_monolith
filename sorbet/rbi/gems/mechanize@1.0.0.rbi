# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `mechanize` gem.
# Please instead update this file by running `bin/tapioca gem mechanize`.


# = Synopsis
# The Mechanize library is used for automating interaction with a website.  It
# can follow links, and submit forms.  Form fields can be populated and
# submitted.  A history of URL's is maintained and can be queried.
#
# == Example
#  require 'rubygems'
#  require 'mechanize'
#  require 'logger'
#
#  agent = Mechanize.new { |a| a.log = Logger.new("mech.log") }
#  agent.user_agent_alias = 'Mac Safari'
#  page = agent.get("http://www.google.com/")
#  search_form = page.form_with(:name => "f")
#  search_form.field_with(:name => "q").value = "Hello"
#  search_results = agent.submit(search_form)
#  puts search_results.body
#
# source://mechanize//lib/mechanize/util.rb#3
class Mechanize
  # @return [Mechanize] a new instance of Mechanize
  # @yield [_self]
  # @yieldparam _self [Mechanize] the object that the method was called on
  #
  # source://mechanize//lib/mechanize.rb#116
  def initialize; end

  # Sets the user and password to be used for authentication.
  #
  # source://mechanize//lib/mechanize.rb#213
  def auth(user, password); end

  # Equivalent to the browser back button.  Returns the most recent page
  # visited.
  #
  # source://mechanize//lib/mechanize.rb#320
  def back; end

  # Sets the user and password to be used for authentication.
  #
  # source://mechanize//lib/mechanize.rb#213
  def basic_auth(user, password); end

  # Returns the value of attribute ca_file.
  #
  # source://mechanize//lib/mechanize.rb#73
  def ca_file; end

  # Sets the attribute ca_file
  #
  # @param value the value to set the attribute ca_file to.
  #
  # source://mechanize//lib/mechanize.rb#73
  def ca_file=(_arg0); end

  # Returns the value of attribute cert.
  #
  # source://mechanize//lib/mechanize.rb#75
  def cert; end

  # Sets the attribute cert
  #
  # @param value the value to set the attribute cert to.
  #
  # source://mechanize//lib/mechanize.rb#75
  def cert=(_arg0); end

  # Clicks the Mechanize::Link object passed in and returns the
  # page fetched.
  #
  # source://mechanize//lib/mechanize.rb#311
  def click(link); end

  # Returns the value of attribute conditional_requests.
  #
  # source://mechanize//lib/mechanize.rb#81
  def conditional_requests; end

  # Sets the attribute conditional_requests
  #
  # @param value the value to set the attribute conditional_requests to.
  #
  # source://mechanize//lib/mechanize.rb#81
  def conditional_requests=(_arg0); end

  # Returns the value of attribute cookie_jar.
  #
  # source://mechanize//lib/mechanize.rb#69
  def cookie_jar; end

  # Sets the attribute cookie_jar
  #
  # @param value the value to set the attribute cookie_jar to.
  #
  # source://mechanize//lib/mechanize.rb#69
  def cookie_jar=(_arg0); end

  # Returns a list of cookies stored in the cookie jar.
  #
  # source://mechanize//lib/mechanize.rb#208
  def cookies; end

  # Returns the current page loaded by Mechanize
  #
  # source://mechanize//lib/mechanize.rb#408
  def current_page; end

  # DELETE to +url+ with +query_params+, and setting +options+:
  #
  #   delete('http://tenderlovemaking.com/', {'q' => 'foo'}, :headers => {})
  #
  # source://mechanize//lib/mechanize.rb#280
  def delete(url, query_params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute follow_meta_refresh.
  #
  # source://mechanize//lib/mechanize.rb#82
  def follow_meta_refresh; end

  # Sets the attribute follow_meta_refresh
  #
  # @param value the value to set the attribute follow_meta_refresh to.
  #
  # source://mechanize//lib/mechanize.rb#82
  def follow_meta_refresh=(_arg0); end

  # Returns the value of attribute redirect_ok.
  #
  # source://mechanize//lib/mechanize.rb#77
  def follow_redirect?; end

  # Fetches the URL passed in and returns a page.
  #
  # @yield [page]
  #
  # source://mechanize//lib/mechanize.rb#220
  def get(options, parameters = T.unsafe(nil), referer = T.unsafe(nil)); end

  # Fetch a file and return the contents of the file.
  #
  # source://mechanize//lib/mechanize.rb#305
  def get_file(url); end

  # Returns the value of attribute gzip_enabled.
  #
  # source://mechanize//lib/mechanize.rb#78
  def gzip_enabled; end

  # Sets the attribute gzip_enabled
  #
  # @param value the value to set the attribute gzip_enabled to.
  #
  # source://mechanize//lib/mechanize.rb#78
  def gzip_enabled=(_arg0); end

  # HEAD to +url+ with +query_params+, and setting +options+:
  #
  #   head('http://tenderlovemaking.com/', {'q' => 'foo'}, :headers => {})
  #
  # @yield [page]
  #
  # source://mechanize//lib/mechanize.rb#291
  def head(url, query_params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute history.
  #
  # source://mechanize//lib/mechanize.rb#100
  def history; end

  # Returns the value of attribute history_added.
  #
  # source://mechanize//lib/mechanize.rb#84
  def history_added; end

  # Sets the attribute history_added
  #
  # @param value the value to set the attribute history_added to.
  #
  # source://mechanize//lib/mechanize.rb#84
  def history_added=(_arg0); end

  # The HTML parser to be used when parsing documents
  #
  # source://mechanize//lib/mechanize.rb#98
  def html_parser; end

  # The HTML parser to be used when parsing documents
  #
  # source://mechanize//lib/mechanize.rb#98
  def html_parser=(_arg0); end

  # Returns the value of attribute keep_alive.
  #
  # source://mechanize//lib/mechanize.rb#80
  def keep_alive; end

  # Sets the attribute keep_alive
  #
  # @param value the value to set the attribute keep_alive to.
  #
  # source://mechanize//lib/mechanize.rb#80
  def keep_alive=(_arg0); end

  # Returns the value of attribute keep_alive_time.
  #
  # source://mechanize//lib/mechanize.rb#79
  def keep_alive_time; end

  # Sets the attribute keep_alive_time
  #
  # @param value the value to set the attribute keep_alive_time to.
  #
  # source://mechanize//lib/mechanize.rb#79
  def keep_alive_time=(_arg0); end

  # Returns the value of attribute key.
  #
  # source://mechanize//lib/mechanize.rb#74
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://mechanize//lib/mechanize.rb#74
  def key=(_arg0); end

  # source://mechanize//lib/mechanize.rb#185
  def log; end

  # source://mechanize//lib/mechanize.rb#184
  def log=(l); end

  # source://mechanize//lib/mechanize.rb#183
  def max_history; end

  # source://mechanize//lib/mechanize.rb#182
  def max_history=(length); end

  # Returns the value of attribute open_timeout.
  #
  # source://mechanize//lib/mechanize.rb#70
  def open_timeout; end

  # Sets the attribute open_timeout
  #
  # @param value the value to set the attribute open_timeout to.
  #
  # source://mechanize//lib/mechanize.rb#70
  def open_timeout=(_arg0); end

  # Returns the current page loaded by Mechanize
  #
  # source://mechanize//lib/mechanize.rb#408
  def page; end

  # Returns the value of attribute pass.
  #
  # source://mechanize//lib/mechanize.rb#76
  def pass; end

  # Sets the attribute pass
  #
  # @param value the value to set the attribute pass to.
  #
  # source://mechanize//lib/mechanize.rb#76
  def pass=(_arg0); end

  # Returns the value of attribute pluggable_parser.
  #
  # source://mechanize//lib/mechanize.rb#101
  def pluggable_parser; end

  # Posts to the given URL with the request entity.  The request
  # entity is specified by either a string, or a list of key-value
  # pairs represented by a hash or an array of arrays.
  #
  # Examples:
  #  agent.post('http://example.com/', "foo" => "bar")
  #
  #  agent.post('http://example.com/', [ ["foo", "bar"] ])
  #
  #  agent.post('http://example.com/', "<message>hello</message>", 'Content-Type' => 'application/xml')
  #
  # source://mechanize//lib/mechanize.rb#334
  def post(url, query = T.unsafe(nil), headers = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize.rb#191
  def post_connect_hooks; end

  # source://mechanize//lib/mechanize.rb#187
  def pre_connect_hooks; end

  # source://mechanize//lib/mechanize/inspect.rb#5
  def pretty_print(q); end

  # Proxy settings
  #
  # source://mechanize//lib/mechanize.rb#92
  def proxy_addr; end

  # Returns the value of attribute proxy_pass.
  #
  # source://mechanize//lib/mechanize.rb#93
  def proxy_pass; end

  # Returns the value of attribute proxy_port.
  #
  # source://mechanize//lib/mechanize.rb#94
  def proxy_port; end

  # Returns the value of attribute proxy_user.
  #
  # source://mechanize//lib/mechanize.rb#95
  def proxy_user; end

  # PUT to +url+ with +entity+, and setting +options+:
  #
  #   put('http://tenderlovemaking.com/', 'new content', :headers => {'Content-Type' => 'text/plain'})
  #
  # source://mechanize//lib/mechanize.rb#271
  def put(url, entity, options = T.unsafe(nil)); end

  # Returns the value of attribute read_timeout.
  #
  # source://mechanize//lib/mechanize.rb#70
  def read_timeout; end

  # Sets the attribute read_timeout
  #
  # @param value the value to set the attribute read_timeout to.
  #
  # source://mechanize//lib/mechanize.rb#70
  def read_timeout=(_arg0); end

  # Returns the value of attribute redirect_ok.
  #
  # source://mechanize//lib/mechanize.rb#77
  def redirect_ok; end

  # Sets the attribute redirect_ok
  #
  # @param value the value to set the attribute redirect_ok to.
  #
  # source://mechanize//lib/mechanize.rb#77
  def redirect_ok=(_arg0); end

  # Returns the value of attribute redirection_limit.
  #
  # source://mechanize//lib/mechanize.rb#86
  def redirection_limit; end

  # Sets the attribute redirection_limit
  #
  # @param value the value to set the attribute redirection_limit to.
  #
  # source://mechanize//lib/mechanize.rb#86
  def redirection_limit=(_arg0); end

  # A hash of custom request headers
  #
  # source://mechanize//lib/mechanize.rb#89
  def request_headers; end

  # A hash of custom request headers
  #
  # source://mechanize//lib/mechanize.rb#89
  def request_headers=(_arg0); end

  # source://mechanize//lib/mechanize.rb#382
  def request_with_entity(verb, url, entity, options = T.unsafe(nil)); end

  # Returns the value of attribute scheme_handlers.
  #
  # source://mechanize//lib/mechanize.rb#85
  def scheme_handlers; end

  # Sets the attribute scheme_handlers
  #
  # @param value the value to set the attribute scheme_handlers to.
  #
  # source://mechanize//lib/mechanize.rb#85
  def scheme_handlers=(_arg0); end

  # Sets the proxy address, port, user, and password
  # +addr+ should be a host, with no "http://"
  #
  # source://mechanize//lib/mechanize.rb#197
  def set_proxy(addr, port, user = T.unsafe(nil), pass = T.unsafe(nil)); end

  # Submit a form with an optional button.
  # Without a button:
  #  page = agent.get('http://example.com')
  #  agent.submit(page.forms.first)
  # With a button
  #  agent.submit(page.forms.first, page.forms.first.buttons.first)
  #
  # source://mechanize//lib/mechanize.rb#366
  def submit(form, button = T.unsafe(nil), headers = T.unsafe(nil)); end

  # Runs given block, then resets the page history as it was before. self is
  # given as a parameter to the block. Returns the value of the block.
  #
  # source://mechanize//lib/mechanize.rb#427
  def transact; end

  # Returns the value of attribute user_agent.
  #
  # source://mechanize//lib/mechanize.rb#71
  def user_agent; end

  # Sets the attribute user_agent
  #
  # @param value the value to set the attribute user_agent to.
  #
  # source://mechanize//lib/mechanize.rb#71
  def user_agent=(_arg0); end

  # Set the user agent for the Mechanize object.
  # See AGENT_ALIASES
  #
  # source://mechanize//lib/mechanize.rb#203
  def user_agent_alias=(al); end

  # Returns the value of attribute verify_callback.
  #
  # source://mechanize//lib/mechanize.rb#83
  def verify_callback; end

  # Sets the attribute verify_callback
  #
  # @param value the value to set the attribute verify_callback to.
  #
  # source://mechanize//lib/mechanize.rb#83
  def verify_callback=(_arg0); end

  # Returns whether or not a url has been visited
  #
  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize.rb#413
  def visited?(url); end

  # Returns a visited page for the url passed in, otherwise nil
  #
  # source://mechanize//lib/mechanize.rb#418
  def visited_page(url); end

  # Returns the value of attribute watch_for_set.
  #
  # source://mechanize//lib/mechanize.rb#72
  def watch_for_set; end

  # Sets the attribute watch_for_set
  #
  # @param value the value to set the attribute watch_for_set to.
  #
  # source://mechanize//lib/mechanize.rb#72
  def watch_for_set=(_arg0); end

  private

  # source://mechanize//lib/mechanize.rb#638
  def add_to_history(page); end

  # uri is an absolute URI
  #
  # @raise [ResponseCodeError.new(page)]
  #
  # source://mechanize//lib/mechanize.rb#470
  def fetch_page(params); end

  # source://mechanize//lib/mechanize.rb#448
  def post_form(url, form, headers = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize.rb#440
  def resolve(url, referer = T.unsafe(nil)); end

  class << self
    # Returns the value of attribute html_parser.
    #
    # source://mechanize//lib/mechanize.rb#107
    def html_parser; end

    # Sets the attribute html_parser
    #
    # @param value the value to set the attribute html_parser to.
    #
    # source://mechanize//lib/mechanize.rb#107
    def html_parser=(_arg0); end

    # @private
    #
    # source://mechanize//lib/mechanize.rb#109
    def inherited(child); end

    # Returns the value of attribute log.
    #
    # source://mechanize//lib/mechanize.rb#107
    def log; end

    # Sets the attribute log
    #
    # @param value the value to set the attribute log to.
    #
    # source://mechanize//lib/mechanize.rb#107
    def log=(_arg0); end
  end
end

# User Agent aliases
#
# source://mechanize//lib/mechanize.rb#55
Mechanize::AGENT_ALIASES = T.let(T.unsafe(nil), Hash)

# source://mechanize//lib/mechanize/chain/uri_resolver.rb#2
class Mechanize::Chain
  # @return [Chain] a new instance of Chain
  #
  # source://mechanize//lib/mechanize/chain.rb#18
  def initialize(list); end

  # source://mechanize//lib/mechanize/chain.rb#23
  def handle(request); end

  # source://mechanize//lib/mechanize/chain.rb#27
  def pass(obj, request); end
end

# source://mechanize//lib/mechanize/chain/auth_headers.rb#3
class Mechanize::Chain::AuthHeaders
  include ::Mechanize::Handler

  # @return [AuthHeaders] a new instance of AuthHeaders
  #
  # source://mechanize//lib/mechanize/chain/auth_headers.rb#9
  def initialize(auth_hash, user, password, digest); end

  # source://mechanize//lib/mechanize/chain/auth_headers.rb#37
  def gen_auth_header(uri, request, auth_header, is_IIS = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/chain/auth_headers.rb#16
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/auth_headers.rb#7
Mechanize::Chain::AuthHeaders::CNONCE = T.let(T.unsafe(nil), String)

# source://mechanize//lib/mechanize/chain/body_decoding_handler.rb#3
class Mechanize::Chain::BodyDecodingHandler
  include ::Mechanize::Handler

  # source://mechanize//lib/mechanize/chain/body_decoding_handler.rb#6
  def handle(ctx, options); end
end

# source://mechanize//lib/mechanize/chain/connection_resolver.rb#3
class Mechanize::Chain::ConnectionResolver
  include ::Mechanize::Handler

  # @return [ConnectionResolver] a new instance of ConnectionResolver
  #
  # source://mechanize//lib/mechanize/chain/connection_resolver.rb#6
  def initialize(connection_cache, keep_alive, proxy_addr, proxy_port, proxy_user, proxy_pass); end

  # source://mechanize//lib/mechanize/chain/connection_resolver.rb#21
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/custom_headers.rb#3
class Mechanize::Chain::CustomHeaders
  include ::Mechanize::Handler

  # source://mechanize//lib/mechanize/chain/custom_headers.rb#6
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/header_resolver.rb#3
class Mechanize::Chain::HeaderResolver
  include ::Mechanize::Handler

  # @return [HeaderResolver] a new instance of HeaderResolver
  #
  # source://mechanize//lib/mechanize/chain/header_resolver.rb#5
  def initialize(keep_alive, keep_alive_time, cookie_jar, user_agent, gzip_enabled, headers); end

  # source://mechanize//lib/mechanize/chain/header_resolver.rb#15
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/parameter_resolver.rb#3
class Mechanize::Chain::ParameterResolver
  include ::Mechanize::Handler

  # source://mechanize//lib/mechanize/chain/parameter_resolver.rb#6
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#17
class Mechanize::Chain::PostConnectHook < ::Mechanize::Chain::PreConnectHook; end

# source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#3
class Mechanize::Chain::PreConnectHook
  include ::Mechanize::Handler

  # @return [PreConnectHook] a new instance of PreConnectHook
  #
  # source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#7
  def initialize; end

  # source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#11
  def handle(ctx, params); end

  # Returns the value of attribute hooks.
  #
  # source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#6
  def hooks; end

  # Sets the attribute hooks
  #
  # @param value the value to set the attribute hooks to.
  #
  # source://mechanize//lib/mechanize/chain/pre_connect_hook.rb#6
  def hooks=(_arg0); end
end

# source://mechanize//lib/mechanize/chain/request_resolver.rb#3
class Mechanize::Chain::RequestResolver
  include ::Mechanize::Handler

  # source://mechanize//lib/mechanize/chain/request_resolver.rb#6
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/response_body_parser.rb#3
class Mechanize::Chain::ResponseBodyParser
  include ::Mechanize::Handler

  # @return [ResponseBodyParser] a new instance of ResponseBodyParser
  #
  # source://mechanize//lib/mechanize/chain/response_body_parser.rb#6
  def initialize(pluggable_parser, watch_for_set); end

  # source://mechanize//lib/mechanize/chain/response_body_parser.rb#11
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/response_header_handler.rb#3
class Mechanize::Chain::ResponseHeaderHandler
  include ::Mechanize::Handler

  # @return [ResponseHeaderHandler] a new instance of ResponseHeaderHandler
  #
  # source://mechanize//lib/mechanize/chain/response_header_handler.rb#6
  def initialize(cookie_jar, connection_cache); end

  # source://mechanize//lib/mechanize/chain/response_header_handler.rb#11
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/response_reader.rb#3
class Mechanize::Chain::ResponseReader
  include ::Mechanize::Handler

  # @return [ResponseReader] a new instance of ResponseReader
  #
  # source://mechanize//lib/mechanize/chain/response_reader.rb#6
  def initialize(response); end

  # @raise [ResponseCodeError]
  #
  # source://mechanize//lib/mechanize/chain/response_reader.rb#10
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/ssl_resolver.rb#3
class Mechanize::Chain::SSLResolver
  include ::Mechanize::Handler

  # @return [SSLResolver] a new instance of SSLResolver
  #
  # source://mechanize//lib/mechanize/chain/ssl_resolver.rb#6
  def initialize(ca_file, verify_callback, cert, key, pass); end

  # source://mechanize//lib/mechanize/chain/ssl_resolver.rb#14
  def handle(ctx, params); end
end

# source://mechanize//lib/mechanize/chain/uri_resolver.rb#3
class Mechanize::Chain::URIResolver
  include ::Mechanize::Handler

  # @return [URIResolver] a new instance of URIResolver
  #
  # source://mechanize//lib/mechanize/chain/uri_resolver.rb#6
  def initialize(scheme_handlers); end

  # @raise [ArgumentError]
  #
  # source://mechanize//lib/mechanize/chain/uri_resolver.rb#10
  def handle(ctx, params); end
end

# =Synopsis
# This class contains an error for when a pluggable parser tries to
# parse a content type that it does not know how to handle.  For example
# if Mechanize::Page were to try to parse a PDF, a ContentTypeError
# would be thrown.
#
# source://mechanize//lib/mechanize/content_type_error.rb#7
class Mechanize::ContentTypeError < ::RuntimeError
  # @return [ContentTypeError] a new instance of ContentTypeError
  #
  # source://mechanize//lib/mechanize/content_type_error.rb#10
  def initialize(content_type); end

  # Returns the value of attribute content_type.
  #
  # source://mechanize//lib/mechanize/content_type_error.rb#8
  def content_type; end
end

# This class is used to represent an HTTP Cookie.
#
# source://mechanize//lib/mechanize/cookie.rb#6
class Mechanize::Cookie < ::WEBrick::Cookie
  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/cookie.rb#66
  def expired?; end

  # source://mechanize//lib/mechanize/cookie.rb#74
  def to_s; end

  class << self
    # source://mechanize//lib/mechanize/cookie.rb#7
    def parse(uri, str, log = T.unsafe(nil)); end
  end
end

# This class is used to manage the Cookies that have been returned from
# any particular website.
#
# source://mechanize//lib/mechanize/cookie_jar.rb#6
class Mechanize::CookieJar
  # @return [CookieJar] a new instance of CookieJar
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#9
  def initialize; end

  # Add a cookie to the Jar.
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#14
  def add(uri, cookie); end

  # Clear the cookie jar
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#100
  def clear!; end

  # Fetch the cookies that should be used for the URI object passed in.
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#30
  def cookies(url); end

  # Write cookies to Mozilla cookies.txt-style IO stream
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#141
  def dump_cookiestxt(io); end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#49
  def empty?(url); end

  # Returns the value of attribute jar.
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#7
  def jar; end

  # Load cookie jar from a file in the format specified.
  #
  # Available formats:
  # :yaml  <- YAML structure.
  # :cookiestxt  <- Mozilla's cookies.txt format
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#86
  def load(file, format = T.unsafe(nil)); end

  # Read cookies from Mozilla cookies.txt-style IO stream
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#105
  def load_cookiestxt(io); end

  # Save the cookie jar to a file in the format specified.
  #
  # Available formats:
  # :yaml  <- YAML structure
  # :cookiestxt  <- Mozilla's cookies.txt format
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#68
  def save_as(file, format = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/cookie_jar.rb#53
  def to_a; end

  private

  # Remove expired cookies
  #
  # source://mechanize//lib/mechanize/cookie_jar.rb#170
  def cleanup; end

  class << self
    # source://mechanize//lib/mechanize/cookie_jar.rb#182
    def strip_port(host); end
  end
end

# = Synopsis
# This is the default (and base) class for the Pluggable Parsers.  If
# Mechanize cannot find an appropriate class to use for the content type,
# this class will be used.  For example, if you download a JPG, Mechanize
# will not know how to parse it, so this class will be instantiated.
#
# This is a good class to use as the base class for building your own
# pluggable parsers.
#
# == Example
#  require 'rubygems'
#  require 'mechanize'
#
#  agent = Mechanize.new
#  agent.get('http://example.com/foo.jpg').class  #=> Mechanize::File
#
# source://mechanize//lib/mechanize/file.rb#18
class Mechanize::File
  # @return [File] a new instance of File
  # @yield [_self]
  # @yieldparam _self [Mechanize::File] the object that the method was called on
  #
  # source://mechanize//lib/mechanize/file.rb#24
  def initialize(uri = T.unsafe(nil), response = T.unsafe(nil), body = T.unsafe(nil), code = T.unsafe(nil)); end

  # Returns the value of attribute body.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def body; end

  # Sets the attribute body
  #
  # @param value the value to set the attribute body to.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def body=(_arg0); end

  # Returns the value of attribute code.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def code; end

  # Sets the attribute code
  #
  # @param value the value to set the attribute code to.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def code=(_arg0); end

  # Returns the value of attribute body.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def content; end

  # Returns the value of attribute filename.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def filename; end

  # Sets the attribute filename
  #
  # @param value the value to set the attribute filename to.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def filename=(_arg0); end

  # Returns the value of attribute response.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def header; end

  # Returns the value of attribute response.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def response; end

  # Sets the attribute response
  #
  # @param value the value to set the attribute response to.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def response=(_arg0); end

  # Use this method to save the content of this object to filename
  #
  # source://mechanize//lib/mechanize/file.rb#54
  def save(filename = T.unsafe(nil)); end

  # Use this method to save the content of this object to filename
  #
  # source://mechanize//lib/mechanize/file.rb#54
  def save_as(filename = T.unsafe(nil)); end

  # Returns the value of attribute uri.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def uri; end

  # Sets the attribute uri
  #
  # @param value the value to set the attribute uri to.
  #
  # source://mechanize//lib/mechanize/file.rb#19
  def uri=(_arg0); end
end

# Fake response for dealing with file:/// requests
#
# source://mechanize//lib/mechanize/file_response.rb#4
class Mechanize::FileResponse
  # @return [FileResponse] a new instance of FileResponse
  #
  # source://mechanize//lib/mechanize/file_response.rb#5
  def initialize(file_path); end

  # source://mechanize//lib/mechanize/file_response.rb#32
  def [](key); end

  # source://mechanize//lib/mechanize/file_response.rb#21
  def code; end

  # source://mechanize//lib/mechanize/file_response.rb#25
  def content_length; end

  # source://mechanize//lib/mechanize/file_response.rb#41
  def each; end

  # source://mechanize//lib/mechanize/file_response.rb#30
  def each_header; end

  # source://mechanize//lib/mechanize/file_response.rb#44
  def get_fields(key); end

  # source://mechanize//lib/mechanize/file_response.rb#9
  def read_body; end

  private

  # source://mechanize//lib/mechanize/file_response.rb#49
  def dir_body; end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/file_response.rb#56
  def directory?; end
end

# = Synopsis
# This is a pluggable parser that automatically saves every file
# it encounters.  It saves the files as a tree, reflecting the
# host and file path.
#
# == Example to save all PDF's
#  require 'rubygems'
#  require 'mechanize'
#
#  agent = Mechanize.new
#  agent.pluggable_parser.pdf = Mechanize::FileSaver
#  agent.get('http://example.com/foo.pdf')
#
# source://mechanize//lib/mechanize/file_saver.rb#15
class Mechanize::FileSaver < ::Mechanize::File
  # @return [FileSaver] a new instance of FileSaver
  #
  # source://mechanize//lib/mechanize/file_saver.rb#18
  def initialize(uri = T.unsafe(nil), response = T.unsafe(nil), body = T.unsafe(nil), code = T.unsafe(nil)); end

  # Returns the value of attribute filename.
  #
  # source://mechanize//lib/mechanize/file_saver.rb#16
  def filename; end
end

# =Synopsis
# This class encapsulates a form parsed out of an HTML page.  Each type
# of input fields available in a form can be accessed through this object.
# See GlobalForm for more methods.
#
# ==Example
# Find a form and print out its fields
#  form = page.forms.first # => Mechanize::Form
#  form.fields.each { |f| puts f.name }
# Set the input field 'name' to "Aaron"
#  form['name'] = 'Aaron'
#  puts form['name']
#
# source://mechanize//lib/mechanize/form/field.rb#2
class Mechanize::Form
  # @return [Form] a new instance of Form
  #
  # source://mechanize//lib/mechanize/form.rb#35
  def initialize(node, mech = T.unsafe(nil), page = T.unsafe(nil)); end

  # Fetch the value of the first input field with the name passed in
  # ==Example
  # Fetch the value set in the input field 'name'
  #  puts form['name']
  #
  # source://mechanize//lib/mechanize/form.rb#111
  def [](field_name); end

  # Set the value of the first input field with the name passed in
  # ==Example
  # Set the value in the input field 'name' to "Aaron"
  #  form['name'] = 'Aaron'
  #
  # source://mechanize//lib/mechanize/form.rb#120
  def []=(field_name, value); end

  # Returns the value of attribute action.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def action; end

  # Sets the attribute action
  #
  # @param value the value to set the attribute action to.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def action=(_arg0); end

  # This method adds a button to the query.  If the form needs to be
  # submitted with multiple buttons, pass each button to this method.
  #
  # source://mechanize//lib/mechanize/form.rb#213
  def add_button_to_query(button); end

  # Add a field with +field_name+ and +value+
  #
  # source://mechanize//lib/mechanize/form.rb#76
  def add_field!(field_name, value = T.unsafe(nil)); end

  # This method builds an array of arrays that represent the query
  # parameters to be used with this form.  The return value can then
  # be used to create a query string for this form.
  #
  # source://mechanize//lib/mechanize/form.rb#168
  def build_query(buttons = T.unsafe(nil)); end

  def button(criteria = T.unsafe(nil)); end
  def button_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute buttons.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def buttons; end

  def buttons_with(criteria = T.unsafe(nil)); end
  def checkbox(criteria = T.unsafe(nil)); end
  def checkbox_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute checkboxes.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def checkboxes; end

  def checkboxes_with(criteria = T.unsafe(nil)); end

  # Submit form using +button+. Defaults
  # to the first button.
  #
  # source://mechanize//lib/mechanize/form.rb#146
  def click_button(button = T.unsafe(nil)); end

  # Removes all fields with name +field_name+.
  #
  # source://mechanize//lib/mechanize/form.rb#237
  def delete_field!(field_name); end

  # Returns the value of attribute fields.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def elements; end

  # Returns the value of attribute enctype.
  #
  # source://mechanize//lib/mechanize/form.rb#28
  def enctype; end

  # Sets the attribute enctype
  #
  # @param value the value to set the attribute enctype to.
  #
  # source://mechanize//lib/mechanize/form.rb#28
  def enctype=(_arg0); end

  def field(criteria = T.unsafe(nil)); end
  def field_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute fields.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def fields; end

  def fields_with(criteria = T.unsafe(nil)); end
  def file_upload(criteria = T.unsafe(nil)); end
  def file_upload_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute file_uploads.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def file_uploads; end

  def file_uploads_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute form_node.
  #
  # source://mechanize//lib/mechanize/form.rb#32
  def form_node; end

  # Returns whether or not the form contains a field with +field_name+
  #
  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#49
  def has_field?(field_name); end

  # Returns whether or not the form contains a field with +field_name+
  #
  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#49
  def has_key?(field_name); end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#55
  def has_value?(value); end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#72
  def hidden_field?(field_name); end

  # source://mechanize//lib/mechanize/form.rb#66
  def hiddens; end

  # source://pp/0.4.0/pp.rb#637
  def inspect; end

  # source://mechanize//lib/mechanize/form.rb#59
  def keys; end

  # Returns the value of attribute method.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def method; end

  # Sets the attribute method
  #
  # @param value the value to set the attribute method to.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def method=(_arg0); end

  # Treat form fields like accessors.
  #
  # source://mechanize//lib/mechanize/form.rb#130
  def method_missing(id, *args); end

  # Returns the value of attribute name.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://mechanize//lib/mechanize/form.rb#25
  def name=(_arg0); end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/form.rb#33
  def page; end

  # source://mechanize//lib/mechanize/inspect.rb#55
  def pretty_print(q); end

  def radiobutton(criteria = T.unsafe(nil)); end
  def radiobutton_with(criteria = T.unsafe(nil)); end

  # Returns the value of attribute radiobuttons.
  #
  # source://mechanize//lib/mechanize/form.rb#27
  def radiobuttons; end

  def radiobuttons_with(criteria = T.unsafe(nil)); end

  # This method calculates the request data to be sent back to the server
  # for this form, depending on if this is a regular post, get, or a
  # multi-part post,
  #
  # source://mechanize//lib/mechanize/form.rb#220
  def request_data; end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#70
  def reset_button?(button_name); end

  # source://mechanize//lib/mechanize/form.rb#64
  def resets; end

  # This method sets multiple fields on the form.  It takes a list of field
  # name, value pairs.  If there is more than one field found with the
  # same name, this method will set the first one found.  If you want to
  # set the value of a duplicate field, use a value which is a Hash with
  # the key as the index in to the form.  The index
  # is zero based.  For example, to set the second field named 'foo', you
  # could do the following:
  #  form.set_fields( :foo => { 1 => 'bar' } )
  #
  # source://mechanize//lib/mechanize/form.rb#88
  def set_fields(fields = T.unsafe(nil)); end

  # Submit this form with the button passed in
  #
  # source://mechanize//lib/mechanize/form.rb#140
  def submit(button = T.unsafe(nil), headers = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#69
  def submit_button?(button_name); end

  # source://mechanize//lib/mechanize/form.rb#63
  def submits; end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#71
  def text_field?(field_name); end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/form.rb#73
  def textarea_field?(field_name); end

  # source://mechanize//lib/mechanize/form.rb#67
  def textareas; end

  # source://mechanize//lib/mechanize/form.rb#65
  def texts; end

  # source://mechanize//lib/mechanize/form.rb#61
  def values; end

  private

  # source://mechanize//lib/mechanize/form.rb#428
  def file_to_multipart(file); end

  # source://mechanize//lib/mechanize/form.rb#160
  def from_native_charset(str); end

  # source://mechanize//lib/mechanize/form.rb#418
  def mime_value_quote(str); end

  # source://mechanize//lib/mechanize/form.rb#422
  def param_to_multipart(name, value); end

  # source://mechanize//lib/mechanize/form.rb#348
  def parse; end

  # This method is sub-method of build_query.
  # It converts charset of query value of fields into expected one.
  #
  # source://mechanize//lib/mechanize/form.rb#152
  def proc_query(field); end

  # source://mechanize//lib/mechanize/form.rb#411
  def rand_string(len = T.unsafe(nil)); end
end

# This class represents a Submit button in a form.
#
# source://mechanize//lib/mechanize/form/button.rb#4
class Mechanize::Form::Button < ::Mechanize::Form::Field; end

# This class represents a check box found in a Form.  To activate the
# CheckBox in the Form, set the checked method to true.
#
# source://mechanize//lib/mechanize/form/check_box.rb#5
class Mechanize::Form::CheckBox < ::Mechanize::Form::RadioButton
  # source://mechanize//lib/mechanize/form/check_box.rb#6
  def query_value; end
end

# This class represents a field in a form.  It handles the following input
# tags found in a form:
# text, password, hidden, int, textarea
#
# To set the value of a field, just use the value method:
# field.value = "foo"
#
# source://mechanize//lib/mechanize/form/field.rb#9
class Mechanize::Form::Field
  # @return [Field] a new instance of Field
  #
  # source://mechanize//lib/mechanize/form/field.rb#12
  def initialize(node, value = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/form/field.rb#26
  def <=>(other); end

  # Returns the value of attribute name.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def name=(_arg0); end

  # Returns the value of attribute node.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def node; end

  # Sets the attribute node
  #
  # @param value the value to set the attribute node to.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def node=(_arg0); end

  # source://mechanize//lib/mechanize/form/field.rb#22
  def query_value; end

  # Returns the value of attribute value.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://mechanize//lib/mechanize/form/field.rb#10
  def value=(_arg0); end
end

# This class represents a file upload field found in a form.  To use this
# class, set FileUpload#file_data= to the data of the file you want
# to upload and FileUpload#mime_type= to the appropriate mime type
# of the file.
# See the example in EXAMPLES[link://files/EXAMPLES_txt.html]
#
# source://mechanize//lib/mechanize/form/file_upload.rb#8
class Mechanize::Form::FileUpload < ::Mechanize::Form::Field
  # @return [FileUpload] a new instance of FileUpload
  #
  # source://mechanize//lib/mechanize/form/file_upload.rb#15
  def initialize(node, file_name); end

  # source://mechanize//lib/mechanize/form/field.rb#10
  def file_data; end

  # source://mechanize//lib/mechanize/form/field.rb#10
  def file_data=(_arg0); end

  # File name
  #
  # source://mechanize//lib/mechanize/form/file_upload.rb#9
  def file_name; end

  # File name
  #
  # source://mechanize//lib/mechanize/form/file_upload.rb#9
  def file_name=(_arg0); end

  # Mime Type (Optional)
  #
  # source://mechanize//lib/mechanize/form/file_upload.rb#10
  def mime_type; end

  # Mime Type (Optional)
  #
  # source://mechanize//lib/mechanize/form/file_upload.rb#10
  def mime_type=(_arg0); end
end

# source://mechanize//lib/mechanize/form/field.rb#36
class Mechanize::Form::Hidden < ::Mechanize::Form::Field; end

# This class represents an image button in a form.  Use the x and y methods
# to set the x and y positions for where the mouse "clicked".
#
# source://mechanize//lib/mechanize/form/image_button.rb#5
class Mechanize::Form::ImageButton < ::Mechanize::Form::Button
  # @return [ImageButton] a new instance of ImageButton
  #
  # source://mechanize//lib/mechanize/form/image_button.rb#8
  def initialize(*args); end

  # source://mechanize//lib/mechanize/form/image_button.rb#14
  def query_value; end

  # Returns the value of attribute x.
  #
  # source://mechanize//lib/mechanize/form/image_button.rb#6
  def x; end

  # Sets the attribute x
  #
  # @param value the value to set the attribute x to.
  #
  # source://mechanize//lib/mechanize/form/image_button.rb#6
  def x=(_arg0); end

  # Returns the value of attribute y.
  #
  # source://mechanize//lib/mechanize/form/image_button.rb#6
  def y; end

  # Sets the attribute y
  #
  # @param value the value to set the attribute y to.
  #
  # source://mechanize//lib/mechanize/form/image_button.rb#6
  def y=(_arg0); end
end

# This class represents a select list where multiple values can be selected.
# MultiSelectList#value= accepts an array, and those values are used as
# values for the select list.  For example, to select multiple values,
# simply do this:
#  list.value = ['one', 'two']
# Single values are still supported, so these two are the same:
#  list.value = ['one']
#  list.value = 'one'
#
# source://mechanize//lib/mechanize/form/multi_select_list.rb#11
class Mechanize::Form::MultiSelectList < ::Mechanize::Form::Field
  # @return [MultiSelectList] a new instance of MultiSelectList
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#14
  def initialize(node); end

  # Returns the value of attribute options.
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#12
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#12
  def options=(_arg0); end

  # source://mechanize//lib/mechanize/form/multi_select_list.rb#26
  def query_value; end

  # Select all options
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#37
  def select_all; end

  # Select no options
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#31
  def select_none; end

  # Get a list of all selected options
  #
  # source://mechanize//lib/mechanize/form/multi_select_list.rb#43
  def selected_options; end

  # source://mechanize//lib/mechanize/form/multi_select_list.rb#59
  def value; end

  # source://mechanize//lib/mechanize/form/multi_select_list.rb#47
  def value=(values); end
end

# This class contains option an option found within SelectList.  A
# SelectList can have many Option classes associated with it.  An option
# can be selected by calling Option#tick, or Option#click.  For example,
# select the first option in a list:
#  select_list.first.tick
#
# source://mechanize//lib/mechanize/form/option.rb#8
class Mechanize::Form::Option
  # @return [Option] a new instance of Option
  #
  # source://mechanize//lib/mechanize/form/option.rb#14
  def initialize(node, select_list); end

  # Toggle the selection value of this option
  #
  # source://mechanize//lib/mechanize/form/option.rb#36
  def click; end

  # Select this option
  #
  # source://mechanize//lib/mechanize/form/option.rb#22
  def select; end

  # Returns the value of attribute select_list.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def select_list; end

  # Returns the value of attribute selected.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def selected; end

  # Returns the value of attribute selected.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def selected?; end

  # Returns the value of attribute text.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def text; end

  # Select this option
  #
  # source://mechanize//lib/mechanize/form/option.rb#22
  def tick; end

  # Returns the value of attribute value.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def to_s; end

  # Unselect this option
  #
  # source://mechanize//lib/mechanize/form/option.rb#28
  def unselect; end

  # Unselect this option
  #
  # source://mechanize//lib/mechanize/form/option.rb#28
  def untick; end

  # Returns the value of attribute value.
  #
  # source://mechanize//lib/mechanize/form/option.rb#9
  def value; end

  private

  # source://mechanize//lib/mechanize/form/option.rb#42
  def unselect_peers; end
end

# This class represents a radio button found in a Form.  To activate the
# RadioButton in the Form, set the checked method to true.
#
# source://mechanize//lib/mechanize/form/radio_button.rb#5
class Mechanize::Form::RadioButton < ::Mechanize::Form::Field
  # @return [RadioButton] a new instance of RadioButton
  #
  # source://mechanize//lib/mechanize/form/radio_button.rb#8
  def initialize(node, form); end

  # source://mechanize//lib/mechanize/form/radio_button.rb#35
  def [](key); end

  # source://mechanize//lib/mechanize/form/radio_button.rb#14
  def check; end

  # Returns the value of attribute checked.
  #
  # source://mechanize//lib/mechanize/form/radio_button.rb#6
  def checked; end

  # Sets the attribute checked
  #
  # @param value the value to set the attribute checked to.
  #
  # source://mechanize//lib/mechanize/form/radio_button.rb#6
  def checked=(_arg0); end

  # source://mechanize//lib/mechanize/form/radio_button.rb#23
  def click; end

  # source://mechanize//lib/mechanize/form/radio_button.rb#27
  def label; end

  # source://mechanize//lib/mechanize/inspect.rb#82
  def pretty_print_instance_variables; end

  # source://mechanize//lib/mechanize/form/radio_button.rb#31
  def text; end

  # source://mechanize//lib/mechanize/form/radio_button.rb#19
  def uncheck; end

  private

  # source://mechanize//lib/mechanize/form/radio_button.rb#40
  def uncheck_peers; end
end

# source://mechanize//lib/mechanize/form/button.rb#6
class Mechanize::Form::Reset < ::Mechanize::Form::Button; end

# This class represents a select list or drop down box in a Form.  Set the
# value for the list by calling SelectList#value=.  SelectList contains a
# list of Option that were found.  After finding the correct option, set
# the select lists value to the option value:
#  selectlist.value = selectlist.options.first.value
# Options can also be selected by "clicking" or selecting them.  See Option
#
# source://mechanize//lib/mechanize/form/select_list.rb#9
class Mechanize::Form::SelectList < ::Mechanize::Form::MultiSelectList
  # @return [SelectList] a new instance of SelectList
  #
  # source://mechanize//lib/mechanize/form/select_list.rb#10
  def initialize(node); end

  # Find one option on this select list with +criteria+
  # Example:
  #   select_list.option_with(:value => '1').value = 'foo'
  #
  # @yield [f]
  #
  # source://mechanize//lib/mechanize/form/select_list.rb#38
  def option_with(criteria); end

  # Find all options on this select list with +criteria+
  # Example:
  #   select_list.options_with(:value => /1|2/).each do |field|
  #     field.value = '20'
  #   end
  #
  # @yield [f]
  #
  # source://mechanize//lib/mechanize/form/select_list.rb#25
  def options_with(criteria); end

  # source://mechanize//lib/mechanize/form/select_list.rb#63
  def query_value; end

  # source://mechanize//lib/mechanize/form/select_list.rb#44
  def value; end

  # source://mechanize//lib/mechanize/form/select_list.rb#55
  def value=(new); end
end

# source://mechanize//lib/mechanize/form/button.rb#5
class Mechanize::Form::Submit < ::Mechanize::Form::Button; end

# source://mechanize//lib/mechanize/form/field.rb#34
class Mechanize::Form::Text < ::Mechanize::Form::Field; end

# source://mechanize//lib/mechanize/form/field.rb#35
class Mechanize::Form::Textarea < ::Mechanize::Form::Field; end

# source://mechanize//lib/mechanize/chain/handler.rb#2
module Mechanize::Handler
  # Returns the value of attribute chain.
  #
  # source://mechanize//lib/mechanize/chain/handler.rb#3
  def chain; end

  # Sets the attribute chain
  #
  # @param value the value to set the attribute chain to.
  #
  # source://mechanize//lib/mechanize/chain/handler.rb#3
  def chain=(_arg0); end

  # source://mechanize//lib/mechanize/chain/handler.rb#5
  def handle(ctx, request); end
end

# source://mechanize//lib/mechanize/headers.rb#2
class Mechanize::Headers < ::Hash
  # source://mechanize//lib/mechanize/headers.rb#3
  def [](key); end

  # source://mechanize//lib/mechanize/headers.rb#6
  def []=(key, value); end
end

# This class manages history for your mechanize object.
#
# source://mechanize//lib/mechanize/history.rb#4
class Mechanize::History < ::Array
  # @return [History] a new instance of History
  #
  # source://mechanize//lib/mechanize/history.rb#7
  def initialize(max_size = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/history.rb#17
  def <<(page, uri = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/history.rb#37
  def clear; end

  # Returns the value of attribute max_size.
  #
  # source://mechanize//lib/mechanize/history.rb#5
  def max_size; end

  # Sets the attribute max_size
  #
  # @param value the value to set the attribute max_size to.
  #
  # source://mechanize//lib/mechanize/history.rb#5
  def max_size=(_arg0); end

  # source://mechanize//lib/mechanize/history.rb#51
  def pop; end

  # source://mechanize//lib/mechanize/history.rb#17
  def push(page, uri = T.unsafe(nil)); end

  # source://mechanize//lib/mechanize/history.rb#42
  def shift; end

  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/history.rb#29
  def visited?(url); end

  # source://mechanize//lib/mechanize/history.rb#33
  def visited_page(url); end

  private

  # source://mechanize//lib/mechanize/history.rb#12
  def initialize_copy(orig); end

  # source://mechanize//lib/mechanize/history.rb#59
  def remove_from_index(page); end
end

# = Synopsis
# This class encapsulates an HTML page.  If Mechanize finds a content
# type of 'text/html', this class will be instantiated and returned.
#
# == Example
#  require 'rubygems'
#  require 'mechanize'
#
#  agent = Mechanize.new
#  agent.get('http://google.com/').class  #=> Mechanize::Page
#
# source://mechanize//lib/mechanize/page/link.rb#2
class Mechanize::Page < ::Mechanize::File
  extend ::Forwardable

  # @raise [Mechanize::ContentTypeError]
  # @return [Page] a new instance of Page
  #
  # source://mechanize//lib/mechanize/page.rb#26
  def initialize(uri = T.unsafe(nil), response = T.unsafe(nil), body = T.unsafe(nil), code = T.unsafe(nil), mech = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def /(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def at(*args, **_arg1, &block); end

  def base(criteria); end
  def base_with(criteria); end

  # Return a list of all base tags
  #
  # source://mechanize//lib/mechanize/page.rb#242
  def bases; end

  def bases_with(criteria); end

  # Get the content type
  #
  # source://mechanize//lib/mechanize/page.rb#92
  def content_type; end

  # source://mechanize//lib/mechanize/page.rb#72
  def encoding; end

  # source://mechanize//lib/mechanize/page.rb#58
  def encoding=(encoding); end

  def form(criteria); end
  def form_with(criteria); end

  # Return a list of all form tags
  #
  # source://mechanize//lib/mechanize/page.rb#216
  def forms; end

  def forms_with(criteria); end
  def frame(criteria); end
  def frame_with(criteria); end

  # Return a list of all frame tags
  #
  # source://mechanize//lib/mechanize/page.rb#249
  def frames; end

  def frames_with(criteria); end
  def iframe(criteria); end
  def iframe_with(criteria); end

  # Return a list of all iframe tags
  #
  # source://mechanize//lib/mechanize/page.rb#256
  def iframes; end

  def iframes_with(criteria); end

  # source://mechanize//lib/mechanize/page.rb#268
  def image_urls; end

  # Return a list of all img tags
  #
  # source://mechanize//lib/mechanize/page.rb#263
  def images; end

  # source://pp/0.4.0/pp.rb#637
  def inspect; end

  # Return a list of all label tags
  #
  # source://mechanize//lib/mechanize/page.rb#274
  def labels; end

  # source://mechanize//lib/mechanize/page.rb#279
  def labels_hash; end

  def link(criteria); end
  def link_with(criteria); end

  # Return a list of all link and area tags
  #
  # source://mechanize//lib/mechanize/page.rb#206
  def links; end

  def links_with(criteria); end

  # Returns the value of attribute mech.
  #
  # source://mechanize//lib/mechanize/page.rb#24
  def mech; end

  # Sets the attribute mech
  #
  # @param value the value to set the attribute mech to.
  #
  # source://mechanize//lib/mechanize/page.rb#24
  def mech=(_arg0); end

  # Return a list of all meta tags
  #
  # source://mechanize//lib/mechanize/page.rb#226
  def meta; end

  # source://mechanize//lib/mechanize/page.rb#76
  def parser; end

  # source://mechanize//lib/mechanize/inspect.rb#15
  def pretty_print(q); end

  # source://mechanize//lib/mechanize/page.rb#76
  def root; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def search(*args, **_arg1, &block); end

  # source://mechanize//lib/mechanize/page.rb#52
  def title; end

  private

  # source://mechanize//lib/mechanize/page.rb#292
  def html_body; end
end

# This class encapsulates a Base tag.  Mechanize treats base tags just
# like 'a' tags.  Base objects will contain links, but most likely will
# have no text.
#
# source://mechanize//lib/mechanize/page/base.rb#6
class Mechanize::Page::Base < ::Mechanize::Page::Link; end

# This class encapsulates a 'frame' tag.  Frame objects can be treated
# just like Link objects.  They contain src, the link they refer to,
# name, the name of the frame.  'src' and 'name' are aliased to 'href'
# and 'text' respectively so that a Frame object can be treated just
# like a Link.
#
# source://mechanize//lib/mechanize/page/frame.rb#8
class Mechanize::Page::Frame < ::Mechanize::Page::Link
  # @return [Frame] a new instance of Frame
  #
  # source://mechanize//lib/mechanize/page/frame.rb#12
  def initialize(node, mech, referer); end

  # source://mechanize//lib/mechanize/page/link.rb#14
  def name; end

  # source://mechanize//lib/mechanize/page/link.rb#13
  def src; end
end

# source://mechanize//lib/mechanize/page/image.rb#3
class Mechanize::Page::Image
  # @return [Image] a new instance of Image
  #
  # source://mechanize//lib/mechanize/page/image.rb#7
  def initialize(node, page); end

  # Returns the value of attribute node.
  #
  # source://mechanize//lib/mechanize/page/image.rb#4
  def node; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/page/image.rb#5
  def page; end

  # source://mechanize//lib/mechanize/page/image.rb#12
  def src; end

  # source://mechanize//lib/mechanize/page/image.rb#16
  def url; end
end

# source://mechanize//lib/mechanize/page/label.rb#3
class Mechanize::Page::Label
  # @return [Label] a new instance of Label
  #
  # source://mechanize//lib/mechanize/page/label.rb#9
  def initialize(node, page); end

  # source://mechanize//lib/mechanize/page/label.rb#15
  def for; end

  # Returns the value of attribute node.
  #
  # source://mechanize//lib/mechanize/page/label.rb#4
  def node; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/page/label.rb#6
  def page; end

  # Returns the value of attribute text.
  #
  # source://mechanize//lib/mechanize/page/label.rb#5
  def text; end

  # Returns the value of attribute text.
  #
  # source://mechanize//lib/mechanize/page/label.rb#5
  def to_s; end
end

# This class encapsulates links.  It contains the text and the URI for
# 'a' tags parsed out of an HTML page.  If the link contains an image,
# the alt text will be used for that image.
#
# For example, the text for the following links with both be 'Hello World':
#
# <a href="http://rubyforge.org">Hello World</a>
# <a href="http://rubyforge.org"><img src="test.jpg" alt="Hello World"></a>
#
# source://mechanize//lib/mechanize/page/link.rb#11
class Mechanize::Page::Link
  # @return [Link] a new instance of Link
  #
  # source://mechanize//lib/mechanize/page/link.rb#20
  def initialize(node, mech, page); end

  # Returns the value of attribute attributes.
  #
  # source://mechanize//lib/mechanize/page/link.rb#15
  def attributes; end

  # Click on this link
  #
  # source://mechanize//lib/mechanize/page/link.rb#43
  def click; end

  # Returns the value of attribute href.
  #
  # source://mechanize//lib/mechanize/page/link.rb#13
  def href; end

  # source://pp/0.4.0/pp.rb#637
  def inspect; end

  # Returns the value of attribute node.
  #
  # source://mechanize//lib/mechanize/page/link.rb#12
  def node; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/page/link.rb#16
  def page; end

  # source://mechanize//lib/mechanize/inspect.rb#45
  def pretty_print(q); end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/page/link.rb#16
  def referer; end

  # Returns the value of attribute text.
  #
  # source://mechanize//lib/mechanize/page/link.rb#14
  def text; end

  # Returns the value of attribute text.
  #
  # source://mechanize//lib/mechanize/page/link.rb#14
  def to_s; end

  # source://mechanize//lib/mechanize/page/link.rb#38
  def uri; end
end

# This class encapsulates a Meta tag.  Mechanize treats meta tags just
# like 'a' tags.  Meta objects will contain links, but most likely will
# have no text.
#
# source://mechanize//lib/mechanize/page/meta.rb#6
class Mechanize::Page::Meta < ::Mechanize::Page::Link
  class << self
    # Parses the delay and url from the content attribute of a meta tag.
    # Parse requires the uri of the current page to infer a url when no
    # url is specified.  If a block is given, the parsed delay and url
    # will be passed to it for further processing.
    #
    # Returns nil if the delay and url cannot be parsed.
    #
    #   # <meta http-equiv="refresh" content="5;url=http://example.com/" />
    #   uri = URI.parse('http://current.com/')
    #
    #   Meta.parse("5;url=http://example.com/", uri)  # => ['5', 'http://example.com/']
    #   Meta.parse("5;url=", uri)                     # => ['5', 'http://current.com/']
    #   Meta.parse("5", uri)                          # => ['5', 'http://current.com/']
    #   Meta.parse("invalid content", uri)            # => nil
    #
    # source://mechanize//lib/mechanize/page/meta.rb#31
    def parse(content, uri); end
  end
end

# Matches the content attribute of a meta tag.  After the match:
#
#   $1:: delay
#   $3:: url
#
# source://mechanize//lib/mechanize/page/meta.rb#13
Mechanize::Page::Meta::CONTENT_REGEXP = T.let(T.unsafe(nil), Regexp)

# = Synopsis
# This class is used to register and maintain pluggable parsers for
# Mechanize to use.
#
# A Pluggable Parser is a parser that Mechanize uses for any particular
# content type.  Mechanize will ask PluggableParser for the class it
# should initialize given any content type.  This class allows users to
# register their own pluggable parsers, or modify existing pluggable
# parsers.
#
# PluggableParser returns a Mechanize::File object for content types
# that it does not know how to handle.  Mechanize::File provides
# basic functionality for any content type, so it is a good class to
# extend when building your own parsers.
# == Example
# To create your own parser, just create a class that takes four
# parameters in the constructor.  Here is an example of registering
# a pluggable parser that handles CSV files:
#  class CSVParser < Mechanize::File
#    attr_reader :csv
#    def initialize(uri=nil, response=nil, body=nil, code=nil)
#      super(uri, response, body, code)
#      @csv = CSV.parse(body)
#    end
#  end
#  agent = Mechanize.new
#  agent.pluggable_parser.csv = CSVParser
#  agent.get('http://example.com/test.csv')  # => CSVParser
# Now any page that returns the content type of 'text/csv' will initialize
# a CSVParser and return that object to the caller.
#
# To register a pluggable parser for a content type that pluggable parser
# does not know about, just use the hash syntax:
#  agent.pluggable_parser['text/something'] = SomeClass
#
# To set the default parser, just use the 'defaut' method:
#  agent.pluggable_parser.default = SomeClass
# Now all unknown content types will be instances of SomeClass.
#
# source://mechanize//lib/mechanize/pluggable_parsers.rb#44
class Mechanize::PluggableParser
  # @return [PluggableParser] a new instance of PluggableParser
  #
  # source://mechanize//lib/mechanize/pluggable_parsers.rb#56
  def initialize; end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#93
  def [](content_type); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#97
  def []=(content_type, klass); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#85
  def csv=(klass); end

  # Returns the value of attribute default.
  #
  # source://mechanize//lib/mechanize/pluggable_parsers.rb#54
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://mechanize//lib/mechanize/pluggable_parsers.rb#54
  def default=(_arg0); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#72
  def html=(klass); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#64
  def parser(content_type); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#81
  def pdf=(klass); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#68
  def register_parser(content_type, klass); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#77
  def xhtml=(klass); end

  # source://mechanize//lib/mechanize/pluggable_parsers.rb#89
  def xml=(klass); end
end

# source://mechanize//lib/mechanize/pluggable_parsers.rb#45
Mechanize::PluggableParser::CONTENT_TYPES = T.let(T.unsafe(nil), Hash)

# Thrown when too many redirects are sent
#
# source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#3
class Mechanize::RedirectLimitReachedError < ::RuntimeError
  # @return [RedirectLimitReachedError] a new instance of RedirectLimitReachedError
  #
  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#5
  def initialize(page, redirects); end

  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#11
  def inspect; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#4
  def page; end

  # Returns the value of attribute redirects.
  #
  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#4
  def redirects; end

  # Returns the value of attribute response_code.
  #
  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#4
  def response_code; end

  # source://mechanize//lib/mechanize/redirect_limit_reached_error.rb#11
  def to_s; end
end

# Thrown when a POST, PUT, or DELETE request results in a redirect
# see RFC 2616 10.3.2, 10.3.3 http://www.ietf.org/rfc/rfc2616.txt
#
# source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#4
class Mechanize::RedirectNotGetOrHeadError < ::RuntimeError
  # @return [RedirectNotGetOrHeadError] a new instance of RedirectNotGetOrHeadError
  #
  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#6
  def initialize(page, verb); end

  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#13
  def inspect; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#5
  def page; end

  # Returns the value of attribute response_code.
  #
  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#5
  def response_code; end

  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#13
  def to_s; end

  # Returns the value of attribute uri.
  #
  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#5
  def uri; end

  # Returns the value of attribute verb.
  #
  # source://mechanize//lib/mechanize/redirect_not_get_or_head_error.rb#5
  def verb; end
end

# =Synopsis
# This error is thrown when Mechanize encounters a response code it does
# not know how to handle.  Currently, this exception will be thrown
# if Mechanize encounters response codes other than 200, 301, or 302.
# Any other response code is up to the user to handle.
#
# source://mechanize//lib/mechanize/response_code_error.rb#7
class Mechanize::ResponseCodeError < ::RuntimeError
  # @return [ResponseCodeError] a new instance of ResponseCodeError
  #
  # source://mechanize//lib/mechanize/response_code_error.rb#11
  def initialize(page); end

  # source://mechanize//lib/mechanize/response_code_error.rb#20
  def inspect; end

  # Returns the value of attribute page.
  #
  # source://mechanize//lib/mechanize/response_code_error.rb#9
  def page; end

  # Returns the value of attribute response_code.
  #
  # source://mechanize//lib/mechanize/response_code_error.rb#8
  def response_code; end

  # source://mechanize//lib/mechanize/response_code_error.rb#16
  def to_s; end
end

# source://mechanize//lib/mechanize/unsupported_scheme_error.rb#2
class Mechanize::UnsupportedSchemeError < ::RuntimeError
  # @return [UnsupportedSchemeError] a new instance of UnsupportedSchemeError
  #
  # source://mechanize//lib/mechanize/unsupported_scheme_error.rb#4
  def initialize(scheme); end

  # Returns the value of attribute scheme.
  #
  # source://mechanize//lib/mechanize/unsupported_scheme_error.rb#3
  def scheme; end

  # Sets the attribute scheme
  #
  # @param value the value to set the attribute scheme to.
  #
  # source://mechanize//lib/mechanize/unsupported_scheme_error.rb#3
  def scheme=(_arg0); end
end

# source://mechanize//lib/mechanize/util.rb#4
class Mechanize::Util
  class << self
    # source://mechanize//lib/mechanize/util.rb#12
    def build_query_string(parameters, enc = T.unsafe(nil)); end

    # source://mechanize//lib/mechanize/util.rb#54
    def detect_charset(src); end

    # source://mechanize//lib/mechanize/util.rb#29
    def from_native_charset(s, code); end

    # source://mechanize//lib/mechanize/util.rb#40
    def html_unescape(s); end

    # source://mechanize//lib/mechanize/util.rb#19
    def to_native_charset(s, code = T.unsafe(nil)); end
  end
end

# source://mechanize//lib/mechanize/util.rb#5
Mechanize::Util::CODE_DIC = T.let(T.unsafe(nil), Hash)

# The version of Mechanize you are using.
#
# source://mechanize//lib/mechanize.rb#51
Mechanize::VERSION = T.let(T.unsafe(nil), String)

# source://mechanize//lib/mechanize/monkey_patch.rb#2
class Net::HTTP < ::Net::Protocol
  # @return [Boolean]
  #
  # source://mechanize//lib/mechanize/monkey_patch.rb#4
  def keep_alive?(req, res); end
end

# source://mechanize//lib/mechanize.rb#644
module WWW
  class << self
    # source://mechanize//lib/mechanize.rb#645
    def const_missing(klass); end
  end
end
