# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `super_diff` gem.
# Please instead update this file by running `bin/tapioca gem super_diff`.


# Source: <https://en.wikipedia.org/wiki/ANSI_escape_code>
#
# source://super_diff//lib/super_diff.rb#5
module SuperDiff
  class << self
    # source://super_diff//lib/super_diff.rb#36
    def configuration; end

    # @yield [configuration]
    #
    # source://super_diff//lib/super_diff.rb#31
    def configure; end

    # source://super_diff//lib/super_diff.rb#70
    def insert_overrides(target_module, mod = T.unsafe(nil), &block); end

    # source://super_diff//lib/super_diff.rb#78
    def insert_singleton_overrides(target_module, mod = T.unsafe(nil), &block); end

    # source://super_diff//lib/super_diff.rb#40
    def inspect_object(object, as_lines:, **rest); end

    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff.rb#61
    def primitive?(value); end

    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff.rb#54
    def time_like?(value); end
  end
end

# source://super_diff//lib/super_diff/colorized_document_extensions.rb#2
module SuperDiff::ColorizedDocumentExtensions
  # source://super_diff//lib/super_diff/colorized_document_extensions.rb#10
  def actual(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/colorized_document_extensions.rb#10
  def border(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/colorized_document_extensions.rb#10
  def elision_marker(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/colorized_document_extensions.rb#10
  def expected(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/colorized_document_extensions.rb#10
  def header(*args, **opts, &block); end

  class << self
    # @private
    #
    # source://super_diff//lib/super_diff/colorized_document_extensions.rb#3
    def extended(extendee); end
  end
end

# source://super_diff//lib/super_diff/configuration.rb#2
class SuperDiff::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://super_diff//lib/super_diff/configuration.rb#20
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute actual_color.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def actual_color; end

  # Sets the attribute actual_color
  #
  # @param value the value to set the attribute actual_color to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def actual_color=(_arg0); end

  # source://super_diff//lib/super_diff/configuration.rb#76
  def add_extra_diff_formatter_class(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#76
  def add_extra_diff_formatter_classes(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#85
  def add_extra_differ_class(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#85
  def add_extra_differ_classes(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#90
  def add_extra_inspection_tree_builder_class(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#90
  def add_extra_inspection_tree_builder_classes(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#99
  def add_extra_operation_tree_builder_class(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#99
  def add_extra_operation_tree_builder_classes(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#108
  def add_extra_operation_tree_class(*classes); end

  # source://super_diff//lib/super_diff/configuration.rb#108
  def add_extra_operation_tree_classes(*classes); end

  # Returns the value of attribute border_color.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def border_color; end

  # Sets the attribute border_color
  #
  # @param value the value to set the attribute border_color to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def border_color=(_arg0); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/configuration.rb#49
  def color_enabled?; end

  # Returns the value of attribute diff_elision_enabled.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def diff_elision_enabled; end

  # Sets the attribute diff_elision_enabled
  #
  # @param value the value to set the attribute diff_elision_enabled to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def diff_elision_enabled=(_arg0); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/configuration.rb#53
  def diff_elision_enabled?; end

  # Returns the value of attribute diff_elision_maximum.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def diff_elision_maximum; end

  # Sets the attribute diff_elision_maximum
  #
  # @param value the value to set the attribute diff_elision_maximum to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def diff_elision_maximum=(_arg0); end

  # Returns the value of attribute elision_marker_color.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def elision_marker_color; end

  # Sets the attribute elision_marker_color
  #
  # @param value the value to set the attribute elision_marker_color to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def elision_marker_color=(_arg0); end

  # Returns the value of attribute expected_color.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def expected_color; end

  # Sets the attribute expected_color
  #
  # @param value the value to set the attribute expected_color to.
  #
  # source://super_diff//lib/super_diff/configuration.rb#10
  def expected_color=(_arg0); end

  # Returns the value of attribute extra_diff_formatter_classes.
  #
  # source://super_diff//lib/super_diff/configuration.rb#3
  def extra_diff_formatter_classes; end

  # Returns the value of attribute extra_differ_classes.
  #
  # source://super_diff//lib/super_diff/configuration.rb#3
  def extra_differ_classes; end

  # Returns the value of attribute extra_inspection_tree_builder_classes.
  #
  # source://super_diff//lib/super_diff/configuration.rb#3
  def extra_inspection_tree_builder_classes; end

  # Returns the value of attribute extra_operation_tree_builder_classes.
  #
  # source://super_diff//lib/super_diff/configuration.rb#3
  def extra_operation_tree_builder_classes; end

  # source://super_diff//lib/super_diff/configuration.rb#3
  def extra_operation_tree_classes; end

  # source://super_diff//lib/super_diff/configuration.rb#10
  def header_color; end

  # source://super_diff//lib/super_diff/configuration.rb#10
  def header_color=(_arg0); end

  # source://super_diff//lib/super_diff/configuration.rb#57
  def merge!(configuration_or_options); end

  # source://super_diff//lib/super_diff/configuration.rb#117
  def to_h; end

  # source://super_diff//lib/super_diff/configuration.rb#72
  def updated; end

  private

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/configuration.rb#139
  def color_enabled_by_default?; end

  # source://super_diff//lib/super_diff/configuration.rb#38
  def initialize_dup(original); end
end

# source://super_diff//lib/super_diff/csi.rb#3
module SuperDiff::Csi
  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/csi.rb#39
    def already_colorized?(text); end

    # Sets the attribute color_enabled
    #
    # @param value the value to set the attribute color_enabled to.
    #
    # source://super_diff//lib/super_diff/csi.rb#16
    def color_enabled=(_arg0); end

    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/csi.rb#23
    def color_enabled?; end

    # source://super_diff//lib/super_diff/csi.rb#27
    def colorize(*args, **opts, &block); end

    # source://super_diff//lib/super_diff/csi.rb#35
    def decolorize(text); end

    # source://super_diff//lib/super_diff/csi.rb#43
    def inspect_colors_in(text); end

    # source://super_diff//lib/super_diff/csi.rb#19
    def reset_sequence; end
  end
end

# source://super_diff//lib/super_diff/csi/bold_sequence.rb#3
class SuperDiff::Csi::BoldSequence
  # source://super_diff//lib/super_diff/csi/bold_sequence.rb#4
  def to_s; end
end

# source://super_diff//lib/super_diff/csi/color.rb#3
class SuperDiff::Csi::Color
  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/color.rb#38
  def background?; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/color.rb#34
  def foreground?; end

  # @raise [NotImplementedError]
  #
  # source://super_diff//lib/super_diff/csi/color.rb#42
  def to_foreground; end

  # @raise [NotImplementedError]
  #
  # source://super_diff//lib/super_diff/csi/color.rb#30
  def to_s; end

  protected

  # source://super_diff//lib/super_diff/csi/color.rb#50
  def interpret_layer!(layer); end

  # Returns the value of attribute layer.
  #
  # source://super_diff//lib/super_diff/csi/color.rb#48
  def layer; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/csi/color.rb#4
    def exists?(name); end

    # source://super_diff//lib/super_diff/csi/color.rb#8
    def resolve(value, layer:); end

    # source://super_diff//lib/super_diff/csi/color.rb#16
    def sub_colorized_areas_in(text); end
  end
end

# source://super_diff//lib/super_diff/csi/color_sequence_block.rb#3
class SuperDiff::Csi::ColorSequenceBlock
  include ::Enumerable

  # @return [ColorSequenceBlock] a new instance of ColorSequenceBlock
  #
  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#6
  def initialize(colors = T.unsafe(nil)); end

  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#14
  def <<(color); end

  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#10
  def each(&block); end

  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#14
  def push(color); end

  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#19
  def to_s; end

  private

  # Returns the value of attribute colors.
  #
  # source://super_diff//lib/super_diff/csi/color_sequence_block.rb#25
  def colors; end
end

# source://super_diff//lib/super_diff/csi/colorized_document.rb#3
class SuperDiff::Csi::ColorizedDocument < ::SuperDiff::Csi::Document
  # @return [ColorizedDocument] a new instance of ColorizedDocument
  #
  # source://super_diff//lib/super_diff/csi/colorized_document.rb#4
  def initialize(&block); end

  protected

  # source://super_diff//lib/super_diff/csi/colorized_document.rb#11
  def colorize_block(colors, opts, &block); end

  # source://super_diff//lib/super_diff/csi/colorized_document.rb#29
  def colorize_inline(contents, colors, opts); end

  private

  # source://super_diff//lib/super_diff/csi/colorized_document.rb#59
  def build_initial_color_sequence_from(colors, opts); end

  # Returns the value of attribute color_sequences_open_in_parent.
  #
  # source://super_diff//lib/super_diff/csi/colorized_document.rb#57
  def color_sequences_open_in_parent; end
end

# source://super_diff//lib/super_diff/csi/document.rb#3
class SuperDiff::Csi::Document
  include ::Enumerable

  # @return [Document] a new instance of Document
  #
  # source://super_diff//lib/super_diff/csi/document.rb#6
  def initialize(&block); end

  # source://super_diff//lib/super_diff/csi/document.rb#19
  def bold(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#23
  def colored(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#23
  def colorize(*args, **opts, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#15
  def each(&block); end

  # source://super_diff//lib/super_diff/csi/document.rb#83
  def indent(by:, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#61
  def line(*contents, indent_by: T.unsafe(nil), &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#90
  def method_missing(name, *args, **opts, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#79
  def newline; end

  # source://super_diff//lib/super_diff/csi/document.rb#46
  def plain(*contents, **_arg1, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#46
  def text(*contents, **_arg1, &block); end

  # source://super_diff//lib/super_diff/csi/document.rb#105
  def to_s; end

  protected

  # source://super_diff//lib/super_diff/csi/document.rb#139
  def add_part(part); end

  # source://super_diff//lib/super_diff/csi/document.rb#113
  def derive_request_from(name); end

  # source://super_diff//lib/super_diff/csi/document.rb#131
  def evaluate_block(&block); end

  # Returns the value of attribute indentation_stack.
  #
  # source://super_diff//lib/super_diff/csi/document.rb#111
  def indentation_stack; end

  # Returns the value of attribute parts.
  #
  # source://super_diff//lib/super_diff/csi/document.rb#111
  def parts; end

  private

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/document.rb#100
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://super_diff//lib/super_diff/csi/document.rb#174
class SuperDiff::Csi::Document::ColorRequest < ::SuperDiff::Csi::Document::Request
  # source://super_diff//lib/super_diff/csi/document.rb#175
  def resolve(doc, args, opts, &block); end
end

# source://super_diff//lib/super_diff/csi/document.rb#166
class SuperDiff::Csi::Document::MethodRequest < ::SuperDiff::Csi::Document::Request
  # source://super_diff//lib/super_diff/csi/document.rb#167
  def resolve(doc, args, opts, &block); end
end

# source://super_diff//lib/super_diff/csi/document.rb#143
class SuperDiff::Csi::Document::Request
  # @return [Request] a new instance of Request
  #
  # source://super_diff//lib/super_diff/csi/document.rb#144
  def initialize(name:, line:); end

  protected

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/document.rb#153
  def for_line?; end

  # Returns the value of attribute name.
  #
  # source://super_diff//lib/super_diff/csi/document.rb#151
  def name; end

  # source://super_diff//lib/super_diff/csi/document.rb#157
  def wrapper; end
end

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#3
class SuperDiff::Csi::EightBitColor < ::SuperDiff::Csi::Color
  # @return [EightBitColor] a new instance of EightBitColor
  #
  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#44
  def initialize(value = T.unsafe(nil), layer: T.unsafe(nil), red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil), type: T.unsafe(nil), index: T.unsafe(nil)); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#81
  def to_foreground; end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#77
  def to_s; end

  private

  # Returns the value of attribute code.
  #
  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#87
  def code; end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#165
  def interpret_code!(code); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#109
  def interpret_color_name!(name); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#157
  def interpret_layer!(value); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#125
  def interpret_pair!(type:, index:); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#146
  def interpret_sequence!(sequence); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#93
  def interpret_triplet!(red:, green:, blue:); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#105
  def invalid_triplet?(*values); end

  # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#89
  def leading_code; end

  class << self
    # source://super_diff//lib/super_diff/csi/eight_bit_color.rb#40
    def opening_regex; end
  end
end

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#36
SuperDiff::Csi::EightBitColor::LAYERS_BY_LEADING_CODE = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#35
SuperDiff::Csi::EightBitColor::LEADING_CODES_BY_LAYER = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#38
SuperDiff::Csi::EightBitColor::OPENING_REGEX = T.let(T.unsafe(nil), Regexp)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#37
SuperDiff::Csi::EightBitColor::SERIAL_CODE = T.let(T.unsafe(nil), Integer)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#24
SuperDiff::Csi::EightBitColor::STARTING_INDICES = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#6
SuperDiff::Csi::EightBitColor::VALID_CODES_BY_NAME = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#5
SuperDiff::Csi::EightBitColor::VALID_CODE_RANGE = T.let(T.unsafe(nil), Range)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#4
SuperDiff::Csi::EightBitColor::VALID_COMPONENT_RANGE = T.let(T.unsafe(nil), Range)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#30
SuperDiff::Csi::EightBitColor::VALID_PAIR_INDEX_RANGES = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/eight_bit_color.rb#29
SuperDiff::Csi::EightBitColor::VALID_PAIR_TYPES = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#3
class SuperDiff::Csi::FourBitColor < ::SuperDiff::Csi::Color
  # @return [FourBitColor] a new instance of FourBitColor
  #
  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#41
  def initialize(value, layer: T.unsafe(nil)); end

  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#63
  def to_foreground; end

  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#58
  def to_s; end

  private

  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#95
  def interpret_code!(code); end

  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#71
  def interpret_name!(name); end

  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#87
  def interpret_sequence!(sequence); end

  # Returns the value of attribute name.
  #
  # source://super_diff//lib/super_diff/csi/four_bit_color.rb#69
  def name; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/csi/four_bit_color.rb#33
    def exists?(name); end

    # source://super_diff//lib/super_diff/csi/four_bit_color.rb#37
    def opening_regex; end
  end
end

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#23
SuperDiff::Csi::FourBitColor::COLORS_BY_CODE = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#31
SuperDiff::Csi::FourBitColor::OPENING_REGEX = T.let(T.unsafe(nil), Regexp)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#5
SuperDiff::Csi::FourBitColor::VALID_CODES_BY_NAME = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#30
SuperDiff::Csi::FourBitColor::VALID_CODE_RANGES = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#29
SuperDiff::Csi::FourBitColor::VALID_NAMES = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/csi/four_bit_color.rb#4
SuperDiff::Csi::FourBitColor::VALID_TYPES = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/csi/reset_sequence.rb#3
class SuperDiff::Csi::ResetSequence
  # source://super_diff//lib/super_diff/csi/reset_sequence.rb#4
  def to_s; end
end

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#3
class SuperDiff::Csi::TwentyFourBitColor < ::SuperDiff::Csi::Color
  # @return [TwentyFourBitColor] a new instance of TwentyFourBitColor
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#14
  def initialize(value = T.unsafe(nil), layer: T.unsafe(nil), red: T.unsafe(nil), green: T.unsafe(nil), blue: T.unsafe(nil)); end

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#35
  def to_foreground; end

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#25
  def to_s; end

  private

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#83
  def interpret_layer!(value); end

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#52
  def interpret_sequence!(sequence); end

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#67
  def interpret_triplet!(red:, green:, blue:); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#79
  def invalid_triplet?(*values); end

  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#48
  def leading_code; end

  # Returns the value of attribute triplet.
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#46
  def triplet; end

  class << self
    # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#10
    def opening_regex; end
  end
end

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#6
SuperDiff::Csi::TwentyFourBitColor::LAYERS_BY_LEADING_CODE = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#5
SuperDiff::Csi::TwentyFourBitColor::LEADING_CODES_BY_LAYER = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#8
SuperDiff::Csi::TwentyFourBitColor::OPENING_REGEX = T.let(T.unsafe(nil), Regexp)

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#7
SuperDiff::Csi::TwentyFourBitColor::SERIAL_CODE = T.let(T.unsafe(nil), Integer)

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#91
class SuperDiff::Csi::TwentyFourBitColor::Triplet
  # @return [Triplet] a new instance of Triplet
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#94
  def initialize(red:, green:, blue:); end

  # Returns the value of attribute blue.
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#92
  def blue; end

  # Returns the value of attribute green.
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#92
  def green; end

  # Returns the value of attribute red.
  #
  # source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#92
  def red; end
end

# source://super_diff//lib/super_diff/csi/twenty_four_bit_color.rb#4
SuperDiff::Csi::TwentyFourBitColor::VALID_COMPONENT_RANGE = T.let(T.unsafe(nil), Range)

# source://super_diff//lib/super_diff/csi/uncolorized_document.rb#3
class SuperDiff::Csi::UncolorizedDocument < ::SuperDiff::Csi::Document
  protected

  # source://super_diff//lib/super_diff/csi/uncolorized_document.rb#22
  def add_part(part); end

  # source://super_diff//lib/super_diff/csi/uncolorized_document.rb#6
  def colorize_block(*_arg0, &block); end

  # source://super_diff//lib/super_diff/csi/uncolorized_document.rb#10
  def colorize_inline(contents, *_arg1); end
end

# source://super_diff//lib/super_diff/differs.rb#2
module SuperDiff::Differs; end

# source://super_diff//lib/super_diff/differs/array.rb#3
class SuperDiff::Differs::Array < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/array.rb#10
  def operation_tree_builder_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/array.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/differs/base.rb#3
class SuperDiff::Differs::Base
  include ::SuperDiff::ImplementationChecks
  extend ::SuperDiff::ImplementationChecks
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/differs/base.rb#14
  def call; end

  protected

  # source://super_diff//lib/super_diff/differs/base.rb#20
  def operation_tree_builder_class; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def indent_level; end

  # source://super_diff//lib/super_diff/differs/base.rb#26
  def operation_tree; end

  class << self
    # @raise [NotImplementedError]
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/base.rb#4
    def applies_to?(_expected, _actual); end

    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/differs/custom_object.rb#3
class SuperDiff::Differs::CustomObject < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/custom_object.rb#12
  def operation_tree_builder_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/custom_object.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/differs/defaults.rb#3
SuperDiff::Differs::DEFAULTS = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/differs/default_object.rb#3
class SuperDiff::Differs::DefaultObject < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/default_object.rb#10
  def operation_tree; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/default_object.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/differs/empty.rb#3
class SuperDiff::Differs::Empty < ::SuperDiff::Differs::Base
  # source://super_diff//lib/super_diff/differs/empty.rb#8
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/empty.rb#4
    def applies_to?(_expected, _actual); end
  end
end

# source://super_diff//lib/super_diff/differs/hash.rb#3
class SuperDiff::Differs::Hash < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/hash.rb#10
  def operation_tree_builder_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/hash.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/differs/main.rb#3
class SuperDiff::Differs::Main
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/differs/main.rb#15
  def call; end

  # source://attr_extras/7.1.0/lib/attr_extras/attr_query.rb#8
  def omit_empty?; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://super_diff//lib/super_diff/differs/main.rb#31
  def available_classes; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def indent_level; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def omit_empty; end

  # source://super_diff//lib/super_diff/differs/main.rb#27
  def resolved_class; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/differs/multiline_string.rb#3
class SuperDiff::Differs::MultilineString < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/multiline_string.rb#11
  def operation_tree_builder_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/multiline_string.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/differs/time_like.rb#3
class SuperDiff::Differs::TimeLike < ::SuperDiff::Differs::Base
  protected

  # source://super_diff//lib/super_diff/differs/time_like.rb#10
  def operation_tree_builder_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/differs/time_like.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers.rb#2
module SuperDiff::EqualityMatchers; end

# source://super_diff//lib/super_diff/equality_matchers/array.rb#3
class SuperDiff::EqualityMatchers::Array < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/array.rb#8
  def fail; end

  protected

  # source://super_diff//lib/super_diff/equality_matchers/array.rb#35
  def diff; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/array.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/base.rb#3
class SuperDiff::EqualityMatchers::Base
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/equality_matchers/base.rb#19
  def call; end

  protected

  # @raise [NotImplementedError]
  #
  # source://super_diff//lib/super_diff/equality_matchers/base.rb#29
  def fail; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def extra_diff_formatter_classes; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def extra_operation_tree_builder_classes; end

  class << self
    # @raise [NotImplementedError]
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/base.rb#4
    def applies_to?(_value); end

    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/defaults.rb#3
SuperDiff::EqualityMatchers::DEFAULTS = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/equality_matchers/default.rb#3
class SuperDiff::EqualityMatchers::Default < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/default.rb#8
  def fail; end

  protected

  # source://super_diff//lib/super_diff/equality_matchers/default.rb#28
  def actual_line; end

  # source://super_diff//lib/super_diff/equality_matchers/default.rb#49
  def diff; end

  # source://super_diff//lib/super_diff/equality_matchers/default.rb#36
  def diff_section; end

  # source://super_diff//lib/super_diff/equality_matchers/default.rb#20
  def expected_line; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/default.rb#4
    def applies_to?(_value); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/hash.rb#3
class SuperDiff::EqualityMatchers::Hash < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/hash.rb#8
  def fail; end

  protected

  # source://super_diff//lib/super_diff/equality_matchers/hash.rb#35
  def diff; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/hash.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/main.rb#3
class SuperDiff::EqualityMatchers::Main
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/equality_matchers/main.rb#8
  def call; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def extra_classes; end

  # source://super_diff//lib/super_diff/equality_matchers/main.rb#14
  def resolved_class; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/multiline_string.rb#3
class SuperDiff::EqualityMatchers::MultilineString < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/multiline_string.rb#8
  def fail; end

  private

  # source://super_diff//lib/super_diff/equality_matchers/multiline_string.rb#36
  def diff; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/multiline_string.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/primitive.rb#3
class SuperDiff::EqualityMatchers::Primitive < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/primitive.rb#9
  def fail; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/primitive.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/equality_matchers/singleline_string.rb#3
class SuperDiff::EqualityMatchers::SinglelineString < ::SuperDiff::EqualityMatchers::Base
  # source://super_diff//lib/super_diff/equality_matchers/singleline_string.rb#8
  def fail; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/equality_matchers/singleline_string.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/errors.rb#2
module SuperDiff::Errors; end

# source://super_diff//lib/super_diff/errors/no_diff_formatter_available_error.rb#3
class SuperDiff::Errors::NoDiffFormatterAvailableError < ::StandardError
  # @return [NoDiffFormatterAvailableError] a new instance of NoDiffFormatterAvailableError
  #
  # source://super_diff//lib/super_diff/errors/no_diff_formatter_available_error.rb#13
  def initialize; end

  # Returns the value of attribute operation_tree.
  #
  # source://super_diff//lib/super_diff/errors/no_diff_formatter_available_error.rb#11
  def operation_tree; end

  # Sets the attribute operation_tree
  #
  # @param value the value to set the attribute operation_tree to.
  #
  # source://super_diff//lib/super_diff/errors/no_diff_formatter_available_error.rb#11
  def operation_tree=(_arg0); end

  class << self
    # source://super_diff//lib/super_diff/errors/no_diff_formatter_available_error.rb#4
    def create(operation_tree); end
  end
end

# source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#3
class SuperDiff::Errors::NoDifferAvailableError < ::StandardError
  # @return [NoDifferAvailableError] a new instance of NoDifferAvailableError
  #
  # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#14
  def initialize; end

  # Returns the value of attribute actual.
  #
  # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#12
  def actual; end

  # Sets the attribute actual
  #
  # @param value the value to set the attribute actual to.
  #
  # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#12
  def actual=(_arg0); end

  # Returns the value of attribute expected.
  #
  # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#12
  def expected; end

  # Sets the attribute expected
  #
  # @param value the value to set the attribute expected to.
  #
  # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#12
  def expected=(_arg0); end

  class << self
    # source://super_diff//lib/super_diff/errors/no_differ_available_error.rb#4
    def create(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/gem_version.rb#2
class SuperDiff::GemVersion
  # @return [GemVersion] a new instance of GemVersion
  #
  # source://super_diff//lib/super_diff/gem_version.rb#3
  def initialize(version); end

  # source://super_diff//lib/super_diff/gem_version.rb#7
  def <(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#11
  def <=(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#15
  def ==(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#27
  def =~(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#23
  def >(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#19
  def >=(other); end

  # source://super_diff//lib/super_diff/gem_version.rb#31
  def to_s; end

  private

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/gem_version.rb#39
  def compare?(operator, other_version); end

  # Returns the value of attribute version.
  #
  # source://super_diff//lib/super_diff/gem_version.rb#37
  def version; end
end

# source://super_diff//lib/super_diff/helpers.rb#2
module SuperDiff::Helpers
  extend ::SuperDiff::Helpers

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/helpers.rb#34
  def jruby?; end

  # source://super_diff//lib/super_diff/helpers.rb#53
  def object_address_for(object); end

  # source://super_diff//lib/super_diff/helpers.rb#25
  def plural_type_for(value); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/helpers.rb#38
  def ruby_version_matches?(version_string); end

  # TODO: Simplify this
  #
  # source://super_diff//lib/super_diff/helpers.rb#6
  def style(*args, color_enabled: T.unsafe(nil), **opts, &block); end

  # source://super_diff//lib/super_diff/helpers.rb#68
  def with_slice_of_array_replaced(array, range, replacement); end
end

# source://super_diff//lib/super_diff/implementation_checks.rb#2
module SuperDiff::ImplementationChecks
  protected

  # @raise [NotImplementedError]
  #
  # source://super_diff//lib/super_diff/implementation_checks.rb#11
  def unimplemented_class_method!; end

  # @raise [NotImplementedError]
  #
  # source://super_diff//lib/super_diff/implementation_checks.rb#3
  def unimplemented_instance_method!; end
end

# source://super_diff//lib/super_diff/line.rb#2
class SuperDiff::Line
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def add_comma; end

  # source://attr_extras/7.1.0/lib/attr_extras/attr_query.rb#8
  def add_comma?; end

  # source://super_diff//lib/super_diff/line.rb#51
  def as_elided; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def children; end

  # source://super_diff//lib/super_diff/line.rb#24
  def clone_with(overrides = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/line.rb#75
  def closes_collection?; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def collection_bookend; end

  # source://super_diff//lib/super_diff/line.rb#43
  def color; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def complete_bookend; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/line.rb#79
  def complete_bookend?; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def elided; end

  # source://attr_extras/7.1.0/lib/attr_extras/attr_query.rb#8
  def elided?; end

  # source://super_diff//lib/super_diff/line.rb#39
  def icon; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def indentation_level; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/line.rb#71
  def opens_collection?; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def prefix; end

  # source://super_diff//lib/super_diff/line.rb#63
  def prefixed_with(prefix); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def type; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def value; end

  # source://super_diff//lib/super_diff/line.rb#47
  def with_comma; end

  # source://super_diff//lib/super_diff/line.rb#67
  def with_complete_bookend(complete_bookend); end

  # source://super_diff//lib/super_diff/line.rb#59
  def with_value_appended(suffix); end

  # source://super_diff//lib/super_diff/line.rb#55
  def with_value_prepended(prelude); end
end

# source://super_diff//lib/super_diff/line.rb#6
SuperDiff::Line::COLORS = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/line.rb#5
SuperDiff::Line::ICONS = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/object_inspection.rb#2
module SuperDiff::ObjectInspection; end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#3
class SuperDiff::ObjectInspection::InspectionTree
  include ::Enumerable

  # @return [InspectionTree] a new instance of InspectionTree
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#6
  def initialize(disallowed_node_names: T.unsafe(nil), &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def add_inspection_of(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def add_text(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def as_lines_when_rendering_to_lines(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def as_prefix_when_rendering_to_lines(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def as_prelude_when_rendering_to_lines(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def as_single_line(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#25
  def before_each_callbacks; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#21
  def each(&block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#58
  def evaluate_block(object, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#62
  def insert_array_inspection_of(array); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#74
  def insert_hash_inspection_of(hash); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#103
  def insert_separated_list(enumerable, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def nested(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def only_when(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#36
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#29
  def render_to_string(object); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def when_rendering_to_lines(*args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#16
  def when_rendering_to_string(*args, **options, &block); end

  private

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#123
  def add_node(node_class, *args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#131
  def append_node(node); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#135
  def build_node(node_class, *args, **options, &block); end

  # Returns the value of attribute disallowed_node_names.
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#121
  def disallowed_node_names; end

  # Returns the value of attribute nodes.
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#121
  def nodes; end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#234
class SuperDiff::ObjectInspection::InspectionTree::DisallowedNodeError < ::StandardError
  # @return [DisallowedNodeError] a new instance of DisallowedNodeError
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#244
  def initialize(_message = T.unsafe(nil)); end

  # Returns the value of attribute node_name.
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#242
  def node_name; end

  # Sets the attribute node_name
  #
  # @param value the value to set the attribute node_name to.
  #
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#242
  def node_name=(_arg0); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#235
    def create(node_name:); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#139
class SuperDiff::ObjectInspection::InspectionTree::UpdateTieredLines
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#154
  def call; end

  private

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#198
  def add_to_last_line; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#209
  def add_to_lines; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#194
  def add_to_prefix; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#205
  def add_to_prelude; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#170
  def concat_with_lines; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def indentation_level; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def index; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def node; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def nodes; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def object; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def prefix; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#178
  def prefix_with(prefix, text); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def prelude; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#186
  def prepend_with(prelude, text); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree.rb#220
  def rendering; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def tiered_lines; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def type; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders.rb#3
module SuperDiff::ObjectInspection::InspectionTreeBuilders; end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/array.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::Array < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/array.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/array.rb#5
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/base.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  include ::SuperDiff::ImplementationChecks
  extend ::AttrExtras::Mixin
  extend ::SuperDiff::ImplementationChecks

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/base.rb#15
  def call; end

  protected

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/base.rb#21
  def inspection_tree; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def object; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/base.rb#9
    def applies_to?(_value); end

    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#72
    def call(*args, &block); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/custom_object.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::CustomObject < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/custom_object.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/custom_object.rb#5
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/defaults.rb#4
SuperDiff::ObjectInspection::InspectionTreeBuilders::DEFAULTS = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/default_object.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::DefaultObject < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/default_object.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/default_object.rb#5
    def applies_to?(_value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/hash.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::Hash < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/hash.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/hash.rb#5
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/main.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::Main
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/main.rb#9
  def call; end

  private

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/main.rb#23
  def available_classes; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def object; end

  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/main.rb#19
  def resolved_class; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#72
    def call(*args, &block); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/primitive.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::Primitive < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/primitive.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/primitive.rb#5
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/time_like.rb#4
class SuperDiff::ObjectInspection::InspectionTreeBuilders::TimeLike < ::SuperDiff::ObjectInspection::InspectionTreeBuilders::Base
  # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/time_like.rb#9
  def call; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/object_inspection/inspection_tree_builders/time_like.rb#5
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes.rb#3
module SuperDiff::ObjectInspection::Nodes
  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes.rb#34
    def registry; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#4
class SuperDiff::ObjectInspection::Nodes::AsLinesWhenRenderingToLines < ::SuperDiff::ObjectInspection::Nodes::Base
  # @return [AsLinesWhenRenderingToLines] a new instance of AsLinesWhenRenderingToLines
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#13
  def initialize(tree, *args, add_comma: T.unsafe(nil), collection_bookend: T.unsafe(nil), **rest); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#42
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#26
  def render_to_string(object); end

  private

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#73
  def add_comma?; end

  # Returns the value of attribute collection_bookend.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#71
  def collection_bookend; end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#87
  def with_add_comma_added_to_last_line_in(lines); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#77
  def with_collection_bookend_added_to_last_line_in(lines); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/as_lines_when_rendering_to_lines.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/as_prefix_when_rendering_to_lines.rb#4
class SuperDiff::ObjectInspection::Nodes::AsPrefixWhenRenderingToLines < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_prefix_when_rendering_to_lines.rb#21
  def render_to_lines(object, **_arg1); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_prefix_when_rendering_to_lines.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/as_prefix_when_rendering_to_lines.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/as_prefix_when_rendering_to_lines.rb#5
    def name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/as_prelude_when_rendering_to_lines.rb#4
class SuperDiff::ObjectInspection::Nodes::AsPreludeWhenRenderingToLines < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_prelude_when_rendering_to_lines.rb#21
  def render_to_lines(object, **_arg1); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_prelude_when_rendering_to_lines.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/as_prelude_when_rendering_to_lines.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/as_prelude_when_rendering_to_lines.rb#5
    def name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/as_single_line.rb#4
class SuperDiff::ObjectInspection::Nodes::AsSingleLine < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/as_single_line.rb#21
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/as_single_line.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/as_single_line.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/as_single_line.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#4
class SuperDiff::ObjectInspection::Nodes::Base
  include ::SuperDiff::ImplementationChecks
  extend ::SuperDiff::ImplementationChecks

  # @return [Base] a new instance of Base
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#16
  def initialize(tree, *args, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#30
  def clone_with(tree: T.unsafe(nil), immediate_value: T.unsafe(nil), block: T.unsafe(nil), **rest); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#63
  def pretty_print(pp); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#43
  def render(object, preferably_as_lines:, **rest); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#58
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#52
  def render_to_string(object); end

  private

  # Returns the value of attribute block.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#80
  def block; end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#90
  def evaluate_block(object); end

  # Returns the value of attribute immediate_value.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#80
  def immediate_value; end

  # Returns the value of attribute options.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#80
  def options; end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#82
  def pretty_print_variables; end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#100
  def render_to_lines_in_subtree(object, type:, indentation_level:, disallowed_node_names: T.unsafe(nil), **rest); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#94
  def render_to_string_in_subtree(object); end

  # Returns the value of attribute tree.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#80
  def tree; end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/base.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/inspection.rb#4
class SuperDiff::ObjectInspection::Nodes::Inspection < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/inspection.rb#31
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/inspection.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/inspection.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/inspection.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/nesting.rb#4
class SuperDiff::ObjectInspection::Nodes::Nesting < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/nesting.rb#17
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/nesting.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/nesting.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/nesting.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#4
class SuperDiff::ObjectInspection::Nodes::OnlyWhen < ::SuperDiff::ObjectInspection::Nodes::Base
  # @return [OnlyWhen] a new instance of OnlyWhen
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#13
  def initialize(tree, test, **options, &block); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#28
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#20
  def render_to_string(object); end

  private

  # Returns the value of attribute test.
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#42
  def test; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#44
  def test_passes?; end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/only_when.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/text.rb#4
class SuperDiff::ObjectInspection::Nodes::Text < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/text.rb#21
  def render_to_lines(object, **_arg1); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/text.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/text.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/text.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_lines.rb#4
class SuperDiff::ObjectInspection::Nodes::WhenRenderingToLines < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_lines.rb#17
  def render_to_lines(object, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_lines.rb#13
  def render_to_string(*_arg0); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_lines.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_lines.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_string.rb#4
class SuperDiff::ObjectInspection::Nodes::WhenRenderingToString < ::SuperDiff::ObjectInspection::Nodes::Base
  # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_string.rb#21
  def render_to_lines(*_arg0, **_arg1); end

  # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_string.rb#13
  def render_to_string(object); end

  class << self
    # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_string.rb#9
    def method_name; end

    # source://super_diff//lib/super_diff/object_inspection/nodes/when_rendering_to_string.rb#5
    def node_name; end
  end
end

# source://super_diff//lib/super_diff/object_inspection/prefix_for_next_node.rb#3
class SuperDiff::ObjectInspection::PrefixForNextNode < ::String; end

# source://super_diff//lib/super_diff/object_inspection/prelude_for_next_node.rb#3
class SuperDiff::ObjectInspection::PreludeForNextNode < ::String; end

# source://super_diff//lib/super_diff/operation_tree_builders.rb#2
module SuperDiff::OperationTreeBuilders; end

# source://super_diff//lib/super_diff/operation_tree_builders/array.rb#3
class SuperDiff::OperationTreeBuilders::Array < ::SuperDiff::OperationTreeBuilders::Base
  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#8
  def call; end

  private

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#15
  def lcs_callbacks; end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#24
  def operation_tree; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/array.rb#28
class SuperDiff::OperationTreeBuilders::Array::LcsCallbacks
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#46
  def change(event); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#38
  def discard_a(event); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#42
  def discard_b(event); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#34
  def match(event); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def operation_tree; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#89
  def add_change_operation(event, children); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#59
  def add_delete_operation(event); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#69
  def add_insert_operation(event); end

  # source://super_diff//lib/super_diff/operation_tree_builders/array.rb#79
  def add_noop_operation(event); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def compare; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end
end

# source://super_diff//lib/super_diff/operation_tree_builders/base.rb#3
class SuperDiff::OperationTreeBuilders::Base
  include ::SuperDiff::ImplementationChecks
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#13
  def call; end

  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#23
  def build_operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#19
  def unary_operations; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#89
  def compare(expected, actual); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#29
  def operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#74
  def possible_comparison_of(operation, next_operation); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#82
  def should_compare?(operation, next_operation); end

  class << self
    # @raise [NotImplementedError]
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/base.rb#4
    def applies_to?(_expected, _actual); end

    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#3
class SuperDiff::OperationTreeBuilders::CustomObject < ::SuperDiff::OperationTreeBuilders::DefaultObject
  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#18
  def attribute_names; end

  # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#12
  def build_operation_tree; end

  private

  # Returns the value of attribute actual_attributes.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#25
  def actual_attributes; end

  # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#27
  def establish_expected_and_actual_attributes; end

  # Returns the value of attribute expected_attributes.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#25
  def expected_attributes; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/custom_object.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/defaults.rb#3
SuperDiff::OperationTreeBuilders::DEFAULTS = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#3
class SuperDiff::OperationTreeBuilders::DefaultObject < ::SuperDiff::OperationTreeBuilders::Base
  # @return [DefaultObject] a new instance of DefaultObject
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#8
  def initialize(*args); end

  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#35
  def attribute_names; end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#25
  def build_operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#31
  def find_operation_tree_for(value); end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#16
  def unary_operations; end

  private

  # Returns the value of attribute actual_attributes.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#42
  def actual_attributes; end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#44
  def establish_expected_and_actual_attributes; end

  # Returns the value of attribute expected_attributes.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#42
  def expected_attributes; end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#72
  def possibly_add_delete_operation_to(operations, attribute_name); end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#91
  def possibly_add_insert_operation_to(operations, attribute_name); end

  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#54
  def possibly_add_noop_operation_to(operations, attribute_name); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#84
  def should_add_delete_operation?(attribute_name); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#103
  def should_add_insert_operation?(attribute_name); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#66
  def should_add_noop_operation?(attribute_name); end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/default_object.rb#4
    def applies_to?(_expected, _actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#3
class SuperDiff::OperationTreeBuilders::Hash < ::SuperDiff::OperationTreeBuilders::Base
  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#14
  def build_operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#10
  def unary_operations; end

  private

  # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#214
  def all_keys; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#210
  def should_add_noop_operation?(key); end

  # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#20
  def unary_operations_using_variant_of_patience_algorithm; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/hash.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/main.rb#3
class SuperDiff::OperationTreeBuilders::Main
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://attr_extras/7.1.0/lib/attr_extras/attr_query.rb#8
  def all_or_nothing?; end

  # source://super_diff//lib/super_diff/operation_tree_builders/main.rb#8
  def call; end

  private

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def actual; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def all_or_nothing; end

  # source://super_diff//lib/super_diff/operation_tree_builders/main.rb#29
  def available_classes; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def expected; end

  # source://super_diff//lib/super_diff/operation_tree_builders/main.rb#25
  def resolved_class; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#3
class SuperDiff::OperationTreeBuilders::MultilineString < ::SuperDiff::OperationTreeBuilders::Base
  # @return [MultilineString] a new instance of MultilineString
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#9
  def initialize(*args); end

  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#33
  def build_operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#21
  def unary_operations; end

  private

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#49
  def add_delete_operations(indices); end

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#61
  def add_insert_operations(indices); end

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#73
  def add_noop_operations(indices); end

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#45
  def opcodes; end

  # Returns the value of attribute original_actual.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#39
  def original_actual; end

  # Returns the value of attribute original_expected.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#39
  def original_expected; end

  # Returns the value of attribute sequence_matcher.
  #
  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#39
  def sequence_matcher; end

  # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#41
  def split_into_lines(string); end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/multiline_string.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_builders/time_like.rb#3
class SuperDiff::OperationTreeBuilders::TimeLike < ::SuperDiff::OperationTreeBuilders::CustomObject
  protected

  # source://super_diff//lib/super_diff/operation_tree_builders/time_like.rb#10
  def attribute_names; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_tree_builders/time_like.rb#4
    def applies_to?(expected, actual); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners.rb#2
module SuperDiff::OperationTreeFlatteners; end

# source://super_diff//lib/super_diff/operation_tree_flatteners/array.rb#3
class SuperDiff::OperationTreeFlatteners::Array < ::SuperDiff::OperationTreeFlatteners::Collection
  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/array.rb#10
  def close_token; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/array.rb#6
  def open_token; end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#3
class SuperDiff::OperationTreeFlatteners::Base
  include ::SuperDiff::ImplementationChecks
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#9
  def call; end

  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#15
  def build_tiered_lines; end

  private

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#21
  def beginning_lines; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#39
  def ending_lines; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def indentation_level; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#31
  def middle_lines; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def operation_tree; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/base.rb#49
  def tiered_lines; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#3
class SuperDiff::OperationTreeFlatteners::Collection < ::SuperDiff::OperationTreeFlatteners::Base
  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#75
  def add_comma_at_end_of_lines(lines); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#53
  def add_prefix_at_beginning_of_lines(lines, operation); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#49
  def add_prefix_at_beginning_of_lines?(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#79
  def build_lines_for_change_operation(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#94
  def build_lines_for_non_change_operation(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#123
  def build_lines_from_inspection_of(value, type:, indentation_level:); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#6
  def build_tiered_lines; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#24
  def inner_lines; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#119
  def item_prefix_for(_operation); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#66
  def last_item_in_collection?(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#58
  def maybe_add_comma_at_end_of_lines(lines, operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#41
  def maybe_add_prefix_at_beginning_of_lines(lines, operation); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#114
  def recursive_operation?(operation); end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#132
class SuperDiff::OperationTreeFlatteners::Collection::InfiniteRecursionError < ::StandardError
  # @return [InfiniteRecursionError] a new instance of InfiniteRecursionError
  #
  # source://super_diff//lib/super_diff/operation_tree_flatteners/collection.rb#133
  def initialize(_message = T.unsafe(nil)); end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/custom_object.rb#3
class SuperDiff::OperationTreeFlatteners::CustomObject < ::SuperDiff::OperationTreeFlatteners::Collection
  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/custom_object.rb#10
  def close_token; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/custom_object.rb#14
  def item_prefix_for(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/custom_object.rb#6
  def open_token; end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/default_object.rb#3
class SuperDiff::OperationTreeFlatteners::DefaultObject < ::SuperDiff::OperationTreeFlatteners::Collection
  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/default_object.rb#14
  def close_token; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/default_object.rb#18
  def item_prefix_for(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/default_object.rb#6
  def open_token; end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#3
class SuperDiff::OperationTreeFlatteners::Hash < ::SuperDiff::OperationTreeFlatteners::Collection
  protected

  # source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#10
  def close_token; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#14
  def item_prefix_for(operation); end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#6
  def open_token; end

  private

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#26
  def format_keys_as_kwargs?; end

  # source://super_diff//lib/super_diff/operation_tree_flatteners/hash.rb#30
  def key_for(operation); end
end

# source://super_diff//lib/super_diff/operation_tree_flatteners/multiline_string.rb#3
class SuperDiff::OperationTreeFlatteners::MultilineString < ::SuperDiff::OperationTreeFlatteners::Base
  # source://super_diff//lib/super_diff/operation_tree_flatteners/multiline_string.rb#4
  def build_tiered_lines; end
end

# source://super_diff//lib/super_diff/operation_trees.rb#2
module SuperDiff::OperationTrees; end

# source://super_diff//lib/super_diff/operation_trees/array.rb#3
class SuperDiff::OperationTrees::Array < ::SuperDiff::OperationTrees::Base
  protected

  # source://super_diff//lib/super_diff/operation_trees/array.rb#10
  def operation_tree_flattener_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/array.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/base.rb#5
class SuperDiff::OperationTrees::Base
  include ::Enumerable
  include ::SuperDiff::ImplementationChecks
  extend ::SuperDiff::ImplementationChecks
  extend ::Forwardable

  # @return [Base] a new instance of Base
  #
  # source://super_diff//lib/super_diff/operation_trees/base.rb#17
  def initialize(operations); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def <<(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://super_diff//lib/super_diff/operation_trees/base.rb#27
  def flatten(indentation_level:); end

  # source://super_diff//lib/super_diff/operation_trees/base.rb#43
  def perhaps_elide(tiered_lines); end

  # source://super_diff//lib/super_diff/operation_trees/base.rb#34
  def pretty_print(pp); end

  # source://super_diff//lib/super_diff/operation_trees/base.rb#21
  def to_diff(indentation_level:); end

  private

  # Returns the value of attribute operations.
  #
  # source://super_diff//lib/super_diff/operation_trees/base.rb#53
  def operations; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/base.rb#6
    def applies_to?(*_arg0); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/custom_object.rb#3
class SuperDiff::OperationTrees::CustomObject < ::SuperDiff::OperationTrees::DefaultObject
  protected

  # source://super_diff//lib/super_diff/operation_trees/custom_object.rb#10
  def operation_tree_flattener_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/custom_object.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/defaults.rb#3
SuperDiff::OperationTrees::DEFAULTS = T.let(T.unsafe(nil), Array)

# source://super_diff//lib/super_diff/operation_trees/default_object.rb#3
class SuperDiff::OperationTrees::DefaultObject < ::SuperDiff::OperationTrees::Base
  # @return [DefaultObject] a new instance of DefaultObject
  #
  # source://super_diff//lib/super_diff/operation_trees/default_object.rb#10
  def initialize(operations, underlying_object:); end

  # source://super_diff//lib/super_diff/operation_trees/default_object.rb#15
  def pretty_print(pp); end

  # Returns the value of attribute underlying_object.
  #
  # source://super_diff//lib/super_diff/operation_trees/default_object.rb#8
  def underlying_object; end

  protected

  # source://super_diff//lib/super_diff/operation_trees/default_object.rb#37
  def operation_tree_flattener_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/default_object.rb#4
    def applies_to?(*_arg0); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/hash.rb#3
class SuperDiff::OperationTrees::Hash < ::SuperDiff::OperationTrees::Base
  protected

  # source://super_diff//lib/super_diff/operation_trees/hash.rb#10
  def operation_tree_flattener_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/hash.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/main.rb#3
class SuperDiff::OperationTrees::Main
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/operation_trees/main.rb#8
  def call; end

  private

  # source://super_diff//lib/super_diff/operation_trees/main.rb#30
  def available_classes; end

  # source://super_diff//lib/super_diff/operation_trees/main.rb#22
  def resolved_class; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def value; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#72
    def call(*args, &block); end
  end
end

# source://super_diff//lib/super_diff/operation_trees/multiline_string.rb#3
class SuperDiff::OperationTrees::MultilineString < ::SuperDiff::OperationTrees::Base
  protected

  # source://super_diff//lib/super_diff/operation_trees/multiline_string.rb#10
  def operation_tree_flattener_class; end

  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/operation_trees/multiline_string.rb#4
    def applies_to?(value); end
  end
end

# source://super_diff//lib/super_diff/operations.rb#2
module SuperDiff::Operations; end

# source://super_diff//lib/super_diff/operations/binary_operation.rb#3
class SuperDiff::Operations::BinaryOperation
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def children; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def left_collection; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def left_index; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def left_key; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def left_value; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def name; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def right_collection; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def right_index; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def right_key; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def right_value; end
end

# source://super_diff//lib/super_diff/operations/unary_operation.rb#3
class SuperDiff::Operations::UnaryOperation
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def collection; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def index; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def key; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def name; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def value; end
end

# source://super_diff//lib/super_diff/recursion_guard.rb#4
module SuperDiff::RecursionGuard
  class << self
    # @return [Boolean]
    #
    # source://super_diff//lib/super_diff/recursion_guard.rb#41
    def already_seen?(object); end

    # source://super_diff//lib/super_diff/recursion_guard.rb#45
    def already_seen_object_ids; end

    # source://super_diff//lib/super_diff/recursion_guard.rb#8
    def guarding_recursion_of(*objects, &block); end

    # source://super_diff//lib/super_diff/recursion_guard.rb#31
    def substituting_recursion_of(*objects); end
  end
end

# source://super_diff//lib/super_diff/recursion_guard.rb#6
SuperDiff::RecursionGuard::PLACEHOLDER = T.let(T.unsafe(nil), String)

# source://super_diff//lib/super_diff/recursion_guard.rb#5
SuperDiff::RecursionGuard::RECURSION_GUARD_KEY = T.let(T.unsafe(nil), String)

# source://super_diff//lib/super_diff/tiered_lines.rb#2
class SuperDiff::TieredLines < ::Array; end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#2
class SuperDiff::TieredLinesElider
  include ::SuperDiff::Helpers
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#10
  def call; end

  private

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#108
  def all_indentation_levels; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#20
  def all_lines_are_changed_or_unchanged?; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#145
  def box_groups_at_decreasing_indentation_levels_within(pane); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#202
  def boxes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#30
  def boxes_to_elide; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#184
  def combine(spannables, on:); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#176
  def combine_congruent_boxes(boxes); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#180
  def combine_congruent_panes(panes); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#55
  def dirty_panes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#24
  def elided_lines; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#164
  def filter_out_boxes_fully_contained_in_others(boxes); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#115
  def find_boxes_to_elide_within(pane); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def lines; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#278
  def maximum; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#139
  def normalized_box_groups_at_decreasing_indentation_levels_within(pane); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#104
  def one_dimensional_line_tree?; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#100
  def outermost_box?(box); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#47
  def padded_dirty_panes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#43
  def panes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#37
  def panes_to_consider_for_eliding; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#68
  def with_box_elided(box, lines); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#224
  def with_end_of_box_elided(box, lines); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#246
  def with_middle_of_box_elided(box, lines); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#206
  def with_start_of_box_elided(box, lines); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#267
  def with_subset_of_lines_elided(lines, range:, indentation_level:); end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#72
    def call(*args, &block); end
  end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#442
class SuperDiff::TieredLinesElider::Box
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#459
  def extend_to(new_end); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#455
  def extended_to(new_end); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#451
  def fits_fully_within?(other); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#447
  def fully_contains?(other); end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def indentation_level; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def range; end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#385
class SuperDiff::TieredLinesElider::BuildBoxes
  # @return [BuildBoxes] a new instance of BuildBoxes
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#394
  def initialize(lines); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#401
  def build; end

  # Returns the value of attribute final_boxes.
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#392
  def final_boxes; end

  private

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#423
  def close_working_collection_box; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#419
  def extend_working_collection_box(index); end

  # Returns the value of attribute lines.
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#417
  def lines; end

  # Returns the value of attribute open_collection_boxes.
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#417
  def open_collection_boxes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#427
  def open_new_collection_box(line, index); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#434
  def record_item_box(line, index); end

  class << self
    # source://super_diff//lib/super_diff/tiered_lines_elider.rb#386
    def call(lines); end
  end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#282
class SuperDiff::TieredLinesElider::BuildPanes
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#287
  def call; end

  private

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#293
  def beginning; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def dirty_panes; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#339
  def ending; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def lines; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#312
  def middle; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#66
    def call(*args, **opts, &block); end
  end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#464
class SuperDiff::TieredLinesElider::Elision
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#485
  def add_comma?; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def children; end

  # @return [Boolean]
  #
  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#481
  def elided?; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def indentation_level; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#473
  def prefix; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#469
  def type; end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#477
  def value; end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#359
class SuperDiff::TieredLinesElider::Pane
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#375
  def capped_to(beginning, ending); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#364
  def extended_to(new_end); end

  # source://super_diff//lib/super_diff/tiered_lines_elider.rb#368
  def padded; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def range; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#51
  def type; end
end

# source://super_diff//lib/super_diff/tiered_lines_elider.rb#3
SuperDiff::TieredLinesElider::SIZE_OF_ELISION = T.let(T.unsafe(nil), Integer)

# source://super_diff//lib/super_diff/tiered_lines_formatter.rb#2
class SuperDiff::TieredLinesFormatter
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#7
  def call; end

  private

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#13
  def colorized_document; end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#24
  def formattable_lines; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def tiered_lines; end

  class << self
    # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#72
    def call(*args, &block); end
  end
end

# source://super_diff//lib/super_diff/tiered_lines_formatter.rb#28
class SuperDiff::TieredLinesFormatter::FormattableLine
  extend ::AttrExtras::Mixin

  # source://attr_extras/7.1.0/lib/attr_extras/attr_initialize.rb#23
  def initialize(*values); end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#46
  def color; end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#42
  def content; end

  private

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#57
  def icon; end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#66
  def indentation; end

  # source://attr_extras/7.1.0/lib/attr_extras/explicit.rb#27
  def line; end

  # source://super_diff//lib/super_diff/tiered_lines_formatter.rb#70
  def possible_comma; end
end

# source://super_diff//lib/super_diff/tiered_lines_formatter.rb#33
SuperDiff::TieredLinesFormatter::FormattableLine::COLORS = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/tiered_lines_formatter.rb#32
SuperDiff::TieredLinesFormatter::FormattableLine::ICONS = T.let(T.unsafe(nil), Hash)

# source://super_diff//lib/super_diff/tiered_lines_formatter.rb#31
SuperDiff::TieredLinesFormatter::FormattableLine::INDENTATION_UNIT = T.let(T.unsafe(nil), String)

# source://super_diff//lib/super_diff/version.rb#2
SuperDiff::VERSION = T.let(T.unsafe(nil), String)
