# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tiktoken_ruby` gem.
# Please instead update this file by running `bin/tapioca gem tiktoken_ruby`.


# source://tiktoken_ruby//lib/tiktoken_ruby/version.rb#3
module Tiktoken
  class << self
    # Gets the encoding for an OpenAI model
    #
    # @example Count tokens for text
    #   enc = Tiktoken.encoding_for_model("gpt-4")
    #   enc.encode("hello world").length #=> 2
    # @param model_name [Symbol|String] The name of the model to get the encoding for
    # @return [Tiktoken::Encoding, nil] The encoding instance, or nil if no encoding is found
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby.rb#35
    def encoding_for_model(model_name); end

    # Returns an encoding by name. If the encoding is not already loaded it will be loaded, but otherwise
    # it will reuse the instance of that type that was previous loaded
    #
    # @example Encode and decode text
    #   enc = Tiktoken.get_encoding("cl100k_base")
    #   enc.decode(enc.encode("hello world")) #=> "hello world"
    # @param name [Symbol|String] The name of the encoding to load
    # @return [Tiktoken::Encoding] The encoding instance
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby.rb#22
    def get_encoding(name); end

    # Lists all the encodings that are supported
    #
    # @return [Array<Symbol>] The list of supported encodings
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby.rb#51
    def list_encoding_names; end

    # Lists all the models that are supported
    #
    # @return [Array<Symbol>] The list of supported models
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby.rb#57
    def list_model_names; end
  end
end

module Tiktoken::BpeFactory
  class << self
    def cl100k_base; end
    def o200k_base; end
    def p50k_base; end
    def p50k_edit; end
    def r50k_base; end
  end
end

# source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#3
class Tiktoken::Encoding
  # @return [Encoding] a new instance of Encoding
  #
  # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#52
  def initialize(ext_base_bpe, name); end

  # Decodes the tokens back into text
  #
  # @param tokens [Array<Integer>] The tokens to decode
  # @return [String] The decoded text
  #
  # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#46
  def decode(tokens); end

  # Encodes the text as a list of integer tokens. This encoding will treat special non text tokens
  # as text unless they're in the allowed_special array. It's basically like the text was escaped
  #
  # @param text [String] The text to encode
  # @param allowed_special [Array<String>] An array of special tokens to allow
  # @return [Array<Integer>] The encoded tokens
  #
  # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#39
  def encode(text, allowed_special: T.unsafe(nil)); end

  # Encodes the text as a list of integer tokens. This encoding will encode special non text tokens
  # basically it's unescaped
  #
  # @param text [String] The text to encode
  # @return [Array<Integer>] The encoded tokens
  #
  # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#30
  def encode_ordinary(text); end

  # Returns the value of attribute name.
  #
  # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#6
  def name; end

  class << self
    # This returns a new Tiktoken::Encoding instance for the requested encoding
    #
    # @param encoding [Symbol] The name of the encoding to load
    # @return [Tiktoken::Encoding] The encoding instance
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#11
    def for_name(encoding); end

    # This returns a Tiktoken::Encoding instance for the requested encoding
    # It will reuse an existing encoding if it's already been loaded
    #
    # @param encoding [Symbol] The name of the encoding to load
    # @return [Tiktoken::Encoding] The encoding instance
    #
    # source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#19
    def for_name_cached(encoding); end
  end
end

# source://tiktoken_ruby//lib/tiktoken_ruby/encoding.rb#4
Tiktoken::Encoding::CACHE_MUTEX = T.let(T.unsafe(nil), Thread::Mutex)

module Tiktoken::Ext; end

class Tiktoken::Ext::CoreBPE
  def decode(_arg0); end
  def encode(_arg0, _arg1); end
  def encode_ordinary(_arg0); end
  def encode_with_special_tokens(_arg0); end
end

# source://tiktoken_ruby//lib/tiktoken_ruby/version.rb#4
Tiktoken::VERSION = T.let(T.unsafe(nil), String)
