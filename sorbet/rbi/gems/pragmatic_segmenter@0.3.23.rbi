# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pragmatic_segmenter` gem.
# Please instead update this file by running `bin/tapioca gem pragmatic_segmenter`.


# source://pragmatic_segmenter//lib/pragmatic_segmenter/version.rb#3
module PragmaticSegmenter; end

# This class searches for periods within an abbreviation and
# replaces the periods.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#9
class PragmaticSegmenter::AbbreviationReplacer
  # @return [AbbreviationReplacer] a new instance of AbbreviationReplacer
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#12
  def initialize(text:, language:); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#17
  def replace; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#11
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#65
  def replace_abbreviation_as_sentence_boundary(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#90
  def replace_multi_period_abbreviations(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#111
  def replace_period_of_abbr(txt, abbr); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#117
  def replace_possessive_abbreviations(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#99
  def replace_pre_number_abbr(txt, abbr); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#105
  def replace_prepositive_abbr(txt, abbr); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#48
  def scan_for_replacements(txt, am, index, character_array); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/abbreviation_replacer.rb#31
  def search_for_abbreviations_in_string(txt); end
end

# This class searches for punctuation between quotes or parenthesis
# and replaces it
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#7
class PragmaticSegmenter::BetweenPunctuation
  # @return [BetweenPunctuation] a new instance of BetweenPunctuation
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#35
  def initialize(text:); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#39
  def replace; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#34
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#94
  def btwn_dbl_quote(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#87
  def sub_punctuation_between_double_quotes(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#105
  def sub_punctuation_between_em_dashes(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#56
  def sub_punctuation_between_parens(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#45
  def sub_punctuation_between_quotes_and_parens(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#98
  def sub_punctuation_between_quotes_arrow(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#112
  def sub_punctuation_between_quotes_slanted(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#80
  def sub_punctuation_between_single_quote_slanted(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#70
  def sub_punctuation_between_single_quotes(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#63
  def sub_punctuation_between_square_brackets(txt); end
end

# Rubular: http://rubular.com/r/3Pw1QlXOjd
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#14
PragmaticSegmenter::BetweenPunctuation::BETWEEN_DOUBLE_QUOTES_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/jTtDKfjxzr
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#32
PragmaticSegmenter::BetweenPunctuation::BETWEEN_EM_DASHES_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/6tTityPflI
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#26
PragmaticSegmenter::BetweenPunctuation::BETWEEN_PARENS_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/x6s4PZK8jc
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#17
PragmaticSegmenter::BetweenPunctuation::BETWEEN_QUOTE_ARROW_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/JbAIpKdlSq
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#20
PragmaticSegmenter::BetweenPunctuation::BETWEEN_QUOTE_SLANTED_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/2YFrKWQUYi
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#9
PragmaticSegmenter::BetweenPunctuation::BETWEEN_SINGLE_QUOTES_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#11
PragmaticSegmenter::BetweenPunctuation::BETWEEN_SINGLE_QUOTE_SLANTED_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/WX4AvnZvlX
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#23
PragmaticSegmenter::BetweenPunctuation::BETWEEN_SQUARE_BRACKETS_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/mXf8cW025o
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/between_punctuation.rb#29
PragmaticSegmenter::BetweenPunctuation::WORD_WITH_LEADING_APOSTROPHE = T.let(T.unsafe(nil), Regexp)

# This is an opinionated class that removes errant newlines,
# xhtml, inline formatting, etc.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#6
class PragmaticSegmenter::Cleaner
  include ::PragmaticSegmenter::Cleaner::Rules

  # @return [Cleaner] a new instance of Cleaner
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#13
  def initialize(text:, doc_type: T.unsafe(nil), language: T.unsafe(nil)); end

  # Clean text of unwanted formatting
  #
  # Example:
  #   >> text = "This is a sentence\ncut off in the middle because pdf."
  #   >> PragmaticSegmenter::Cleaner(text: text).clean
  #   => "This is a sentence cut off in the middle because pdf."
  #
  # Arguments:
  #    text:       (String)  *required
  #    language:   (String)  *optional
  #                (two character ISO 639-1 code e.g. 'en')
  #    doc_type:   (String)  *optional
  #                (e.g. 'pdf')
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#33
  def clean; end

  # Returns the value of attribute doc_type.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#12
  def doc_type; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#12
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#52
  def abbreviations; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#56
  def check_for_no_space_in_between_sentences; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#132
  def clean_consecutive_characters; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#123
  def clean_quotations; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#127
  def clean_table_of_contents; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#82
  def remove_all_newlines; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#87
  def remove_newline_in_middle_of_sentence; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#94
  def remove_newline_in_middle_of_word; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#116
  def remove_pdf_line_breaks; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#103
  def replace_double_newlines; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#98
  def replace_escaped_newlines; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#107
  def replace_newlines; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#65
  def replace_punctuation_in_brackets; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner.rb#71
  def search_for_connected_sentences(word, txt, regex, rule); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#7
module PragmaticSegmenter::Cleaner::Rules; end

# Rubular: http://rubular.com/r/IQ4TPfsbd8
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#43
PragmaticSegmenter::Cleaner::Rules::ConsecutiveForwardSlashRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/DwNSuZrNtk
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#40
PragmaticSegmenter::Cleaner::Rules::ConsecutivePeriodsRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/H6HOJeA8bq
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#15
PragmaticSegmenter::Cleaner::Rules::DoubleNewLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/dMxp5MixFS
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#12
PragmaticSegmenter::Cleaner::Rules::DoubleNewLineWithSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#24
PragmaticSegmenter::Cleaner::Rules::EscapedCarriageReturnRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#23
PragmaticSegmenter::Cleaner::Rules::EscapedNewLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#68
module PragmaticSegmenter::Cleaner::Rules::HTML; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#75
PragmaticSegmenter::Cleaner::Rules::HTML::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/XZVqMPJhea
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#73
PragmaticSegmenter::Cleaner::Rules::HTML::EscapedHTMLTagRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/9d0OVOEJWj
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#70
PragmaticSegmenter::Cleaner::Rules::HTML::HTMLTagRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/bAJrhyLNeZ
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#34
PragmaticSegmenter::Cleaner::Rules::InlineFormattingRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/3GiRiP2IbD
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#58
PragmaticSegmenter::Cleaner::Rules::NEWLINE_IN_MIDDLE_OF_SENTENCE_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/l6KN6rH5XE
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#51
PragmaticSegmenter::Cleaner::Rules::NO_SPACE_BETWEEN_SENTENCES_DIGIT_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/6dt98uI76u
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#47
PragmaticSegmenter::Cleaner::Rules::NO_SPACE_BETWEEN_SENTENCES_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/Gn18aAnLdZ
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#62
PragmaticSegmenter::Cleaner::Rules::NewLineFollowedByBulletRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/FseyMiiYFT
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#18
PragmaticSegmenter::Cleaner::Rules::NewLineFollowedByPeriodRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/V57WnM9Zut
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#9
PragmaticSegmenter::Cleaner::Rules::NewLineInMiddleOfWordRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#52
PragmaticSegmenter::Cleaner::Rules::NoSpaceBetweenSentencesDigitRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#48
PragmaticSegmenter::Cleaner::Rules::NoSpaceBetweenSentencesRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#78
module PragmaticSegmenter::Cleaner::Rules::PDF; end

# Rubular: http://rubular.com/r/eaNwGavmdo
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#83
PragmaticSegmenter::Cleaner::Rules::PDF::NewLineInMiddleOfSentenceNoSpacesRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/UZAVcwqck8
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#80
PragmaticSegmenter::Cleaner::Rules::PDF::NewLineInMiddleOfSentenceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#64
PragmaticSegmenter::Cleaner::Rules::QuotationsFirstRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#65
PragmaticSegmenter::Cleaner::Rules::QuotationsSecondRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#21
PragmaticSegmenter::Cleaner::Rules::ReplaceNewlineWithCarriageReturnRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/8mc1ArOIGy
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#37
PragmaticSegmenter::Cleaner::Rules::TableOfContentsRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#28
PragmaticSegmenter::Cleaner::Rules::TypoEscapedCarriageReturnRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#26
PragmaticSegmenter::Cleaner::Rules::TypoEscapedNewLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/cleaner/rules.rb#55
PragmaticSegmenter::Cleaner::Rules::URL_EMAIL_KEYWORDS = T.let(T.unsafe(nil), Array)

# This class searches for exclamation points that
# are part of words and not ending punctuation and replaces them.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/exclamation_words.rb#9
module PragmaticSegmenter::ExclamationWords
  class << self
    # source://pragmatic_segmenter//lib/pragmatic_segmenter/exclamation_words.rb#13
    def apply_rules(text); end
  end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/exclamation_words.rb#10
PragmaticSegmenter::ExclamationWords::EXCLAMATION_WORDS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/exclamation_words.rb#11
PragmaticSegmenter::ExclamationWords::REGEXP = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#5
module PragmaticSegmenter::Languages
  class << self
    # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages.rb#57
    def get_language_by_code(code); end
  end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/amharic.rb#5
module PragmaticSegmenter::Languages::Amharic
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/amharic.rb#11
class PragmaticSegmenter::Languages::Amharic::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/amharic.rb#12
PragmaticSegmenter::Languages::Amharic::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/amharic.rb#9
PragmaticSegmenter::Languages::Amharic::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/amharic.rb#8
PragmaticSegmenter::Languages::Amharic::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#5
module PragmaticSegmenter::Languages::Arabic
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#11
module PragmaticSegmenter::Languages::Arabic::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#12
PragmaticSegmenter::Languages::Arabic::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#14
PragmaticSegmenter::Languages::Arabic::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#13
PragmaticSegmenter::Languages::Arabic::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#23
class PragmaticSegmenter::Languages::Arabic::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#27
  def scan_for_replacements(txt, am, index, character_array); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#24
PragmaticSegmenter::Languages::Arabic::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#8
PragmaticSegmenter::Languages::Arabic::Punctuations = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/RX5HpdDIyv
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#18
PragmaticSegmenter::Languages::Arabic::ReplaceColonBetweenNumbersRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/kPRgApNHUg
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#21
PragmaticSegmenter::Languages::Arabic::ReplaceNonSentenceBoundaryCommaRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/arabic.rb#9
PragmaticSegmenter::Languages::Arabic::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/armenian.rb#5
module PragmaticSegmenter::Languages::Armenian
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/armenian.rb#11
class PragmaticSegmenter::Languages::Armenian::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/armenian.rb#12
PragmaticSegmenter::Languages::Armenian::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/armenian.rb#9
PragmaticSegmenter::Languages::Armenian::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/armenian.rb#8
PragmaticSegmenter::Languages::Armenian::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#5
module PragmaticSegmenter::Languages::Bulgarian
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#8
module PragmaticSegmenter::Languages::Bulgarian::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#9
PragmaticSegmenter::Languages::Bulgarian::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#10
PragmaticSegmenter::Languages::Bulgarian::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#11
PragmaticSegmenter::Languages::Bulgarian::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#14
class PragmaticSegmenter::Languages::Bulgarian::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#18
  def replace_period_of_abbr(txt, abbr); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/bulgarian.rb#15
PragmaticSegmenter::Languages::Bulgarian::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/burmese.rb#5
module PragmaticSegmenter::Languages::Burmese
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/burmese.rb#11
class PragmaticSegmenter::Languages::Burmese::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/burmese.rb#12
PragmaticSegmenter::Languages::Burmese::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/burmese.rb#9
PragmaticSegmenter::Languages::Burmese::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/burmese.rb#8
PragmaticSegmenter::Languages::Burmese::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#5
module PragmaticSegmenter::Languages::Chinese
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#8
class PragmaticSegmenter::Languages::Chinese::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#9
PragmaticSegmenter::Languages::Chinese::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#12
class PragmaticSegmenter::Languages::Chinese::BetweenPunctuation < ::PragmaticSegmenter::BetweenPunctuation
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#23
  def sub_punctuation_between_double_angled_quotation_marks(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#30
  def sub_punctuation_between_l_bracket(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#17
  def sub_punctuation_between_quotes_and_parens(txt); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#13
PragmaticSegmenter::Languages::Chinese::BetweenPunctuation::BETWEEN_DOUBLE_ANGLE_QUOTATION_MARK_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/chinese.rb#14
PragmaticSegmenter::Languages::Chinese::BetweenPunctuation::BETWEEN_L_BRACKET_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#6
module PragmaticSegmenter::Languages::Common; end

# Defines the abbreviations for each language (if available)
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#13
module PragmaticSegmenter::Languages::Common::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#14
PragmaticSegmenter::Languages::Common::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#16
PragmaticSegmenter::Languages::Common::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#15
PragmaticSegmenter::Languages::Common::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#105
class PragmaticSegmenter::Languages::Common::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#106
PragmaticSegmenter::Languages::Common::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#19
module PragmaticSegmenter::Languages::Common::Abbreviations; end

# Rubular: http://rubular.com/r/EUbZCNfgei
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#21
PragmaticSegmenter::Languages::Common::Abbreviations::WithMultiplePeriodsAndEmailRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#61
module PragmaticSegmenter::Languages::Common::AmPmRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#74
PragmaticSegmenter::Languages::Common::AmPmRules::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/DgUDq4mLz5
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#72
PragmaticSegmenter::Languages::Common::AmPmRules::LowerCaseAmRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/13q7SnOhgA
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#69
PragmaticSegmenter::Languages::Common::AmPmRules::LowerCasePmRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/AJMCotJVbW
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#66
PragmaticSegmenter::Languages::Common::AmPmRules::UpperCaseAmRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/Vnx3m4Spc8
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#63
PragmaticSegmenter::Languages::Common::AmPmRules::UpperCasePmRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/TYzr4qOW1Q
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#42
PragmaticSegmenter::Languages::Common::BETWEEN_DOUBLE_QUOTES_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/mQ8Es9bxtk
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#48
PragmaticSegmenter::Languages::Common::CONTINUOUS_PUNCTUATION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#31
module PragmaticSegmenter::Languages::Common::DoublePunctuationRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#37
PragmaticSegmenter::Languages::Common::DoublePunctuationRules::All = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#32
PragmaticSegmenter::Languages::Common::DoublePunctuationRules::FirstRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#35
PragmaticSegmenter::Languages::Common::DoublePunctuationRules::ForthRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#33
PragmaticSegmenter::Languages::Common::DoublePunctuationRules::SecondRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#34
PragmaticSegmenter::Languages::Common::DoublePunctuationRules::ThirdRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# http://www.dailywritingtips.com/in-search-of-a-4-dot-ellipsis/
# http://www.thepunctuationguide.com/ellipses.html
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#13
module PragmaticSegmenter::Languages::Common::EllipsisRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#28
PragmaticSegmenter::Languages::Common::EllipsisRules::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/Hdqpd90owl
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#18
PragmaticSegmenter::Languages::Common::EllipsisRules::FourConsecutiveRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/2VvZ8wRbd8
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#24
PragmaticSegmenter::Languages::Common::EllipsisRules::FourSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#26
PragmaticSegmenter::Languages::Common::EllipsisRules::OtherThreePeriodRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/i60hCK81fz
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#15
PragmaticSegmenter::Languages::Common::EllipsisRules::ThreeConsecutiveRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/YBG1dIHTRu
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/ellipsis.rb#21
PragmaticSegmenter::Languages::Common::EllipsisRules::ThreeSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#45
module PragmaticSegmenter::Languages::Common::ExclamationPointRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#55
PragmaticSegmenter::Languages::Common::ExclamationPointRules::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/sl57YI8LkA
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#50
PragmaticSegmenter::Languages::Common::ExclamationPointRules::BeforeCommaMidSentenceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/XS1XXFRfM2
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#47
PragmaticSegmenter::Languages::Common::ExclamationPointRules::InQuotationRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/f9zTjmkIPb
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#53
PragmaticSegmenter::Languages::Common::ExclamationPointRules::MidSentenceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#101
PragmaticSegmenter::Languages::Common::ExtraWhiteSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#27
PragmaticSegmenter::Languages::Common::FileFormatRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/G2opjedIm9
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#25
PragmaticSegmenter::Languages::Common::GeoLocationRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/NEv265G2X2
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#56
PragmaticSegmenter::Languages::Common::KommanditgesellschaftRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/xDkpFZ0EgH
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#59
PragmaticSegmenter::Languages::Common::MULTI_PERIOD_ABBREVIATION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#50
PragmaticSegmenter::Languages::Common::NUMBERED_REFERENCE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#7
module PragmaticSegmenter::Languages::Common::Numbers; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#23
PragmaticSegmenter::Languages::Common::Numbers::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/rf4l1HjtjG
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#15
PragmaticSegmenter::Languages::Common::Numbers::NewLineNumberPeriodSpaceLetterRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/EMk5MpiUzt
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#12
PragmaticSegmenter::Languages::Common::Numbers::NumberAfterPeriodBeforeLetterRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/oNyxBOqbyy
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#9
PragmaticSegmenter::Languages::Common::Numbers::PeriodBeforeNumberRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/HPa4sdc6b9
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#18
PragmaticSegmenter::Languages::Common::Numbers::StartLineNumberPeriodRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/NuvWnKleFl
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#21
PragmaticSegmenter::Languages::Common::Numbers::StartLineTwoDigitNumberPeriodRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/6flGnUMEVl
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#39
PragmaticSegmenter::Languages::Common::PARENS_BETWEEN_DOUBLE_QUOTES_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/yqa4Rit8EY
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#53
PragmaticSegmenter::Languages::Common::PossessiveAbbreviationRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# This class holds the punctuation marks.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#10
PragmaticSegmenter::Languages::Common::Punctuations = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/NqCqv372Ix
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#36
PragmaticSegmenter::Languages::Common::QUOTATION_AT_END_OF_SENTENCE_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/aXPUGm6fQh
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#42
PragmaticSegmenter::Languages::Common::QuestionMarkInQuotationRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#89
module PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#96
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::All = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#92
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::SubFourSpacePeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#94
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::SubOnePeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#90
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::SubThreeConsecutivePeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#91
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::SubThreeSpacePeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#93
PragmaticSegmenter::Languages::Common::ReinsertEllipsisRules::SubTwoConsecutivePeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#33
PragmaticSegmenter::Languages::Common::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/JMjlZHAT4g
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#45
PragmaticSegmenter::Languages::Common::SPLIT_SPACE_QUOTATION_AT_END_OF_SENTENCE_REGEX = T.let(T.unsafe(nil), Regexp)

# This class searches for periods within an abbreviation and
# replaces the periods.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#79
module PragmaticSegmenter::Languages::Common::SingleLetterAbbreviationRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#86
PragmaticSegmenter::Languages::Common::SingleLetterAbbreviationRules::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/e3H6kwnr6H
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#81
PragmaticSegmenter::Languages::Common::SingleLetterAbbreviationRules::SingleUpperCaseLetterAtStartOfLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/gitvf0YWH4
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common/numbers.rb#84
PragmaticSegmenter::Languages::Common::SingleLetterAbbreviationRules::SingleUpperCaseLetterRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#29
PragmaticSegmenter::Languages::Common::SingleNewLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#103
PragmaticSegmenter::Languages::Common::SubSingleQuoteRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#58
module PragmaticSegmenter::Languages::Common::SubSymbolsRules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#77
PragmaticSegmenter::Languages::Common::SubSymbolsRules::All = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#60
PragmaticSegmenter::Languages::Common::SubSymbolsRules::ArabicComma = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#65
PragmaticSegmenter::Languages::Common::SubSymbolsRules::ExclamationPoint = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#64
PragmaticSegmenter::Languages::Common::SubSymbolsRules::FullWidthExclamation = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#62
PragmaticSegmenter::Languages::Common::SubSymbolsRules::FullWidthPeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#67
PragmaticSegmenter::Languages::Common::SubSymbolsRules::FullWidthQuestionMark = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#72
PragmaticSegmenter::Languages::Common::SubSymbolsRules::LeftParens = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#71
PragmaticSegmenter::Languages::Common::SubSymbolsRules::MixedDoubleEE = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#70
PragmaticSegmenter::Languages::Common::SubSymbolsRules::MixedDoubleEQ = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#68
PragmaticSegmenter::Languages::Common::SubSymbolsRules::MixedDoubleQE = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#69
PragmaticSegmenter::Languages::Common::SubSymbolsRules::MixedDoubleQQ = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#75
PragmaticSegmenter::Languages::Common::SubSymbolsRules::Newline = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#59
PragmaticSegmenter::Languages::Common::SubSymbolsRules::Period = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#66
PragmaticSegmenter::Languages::Common::SubSymbolsRules::QuestionMark = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#73
PragmaticSegmenter::Languages::Common::SubSymbolsRules::RightParens = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#61
PragmaticSegmenter::Languages::Common::SubSymbolsRules::SemiColon = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#63
PragmaticSegmenter::Languages::Common::SubSymbolsRules::SpecialPeriod = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/common.rb#74
PragmaticSegmenter::Languages::Common::SubSymbolsRules::TemporaryEndingPunctutation = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#5
module PragmaticSegmenter::Languages::Danish
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#25
module PragmaticSegmenter::Languages::Danish::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#26
PragmaticSegmenter::Languages::Danish::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#27
PragmaticSegmenter::Languages::Danish::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#28
PragmaticSegmenter::Languages::Danish::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#48
class PragmaticSegmenter::Languages::Danish::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#54
  def replace_abbreviation_as_sentence_boundary(txt); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#49
PragmaticSegmenter::Languages::Danish::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#8
class PragmaticSegmenter::Languages::Danish::Cleaner < ::PragmaticSegmenter::Cleaner
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#9
  def clean; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#20
  def abbreviations; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#16
  def clean_quotations; end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#46
PragmaticSegmenter::Languages::Danish::MONTHS = T.let(T.unsafe(nil), Array)

# This handles the case where a dot is used to denote and ordinal (5. Juni)
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#32
module PragmaticSegmenter::Languages::Danish::Numbers; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#39
PragmaticSegmenter::Languages::Danish::Numbers::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/ityNMwdghj
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#37
PragmaticSegmenter::Languages::Danish::Numbers::NegativeNumberPeriodSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/hZxoyQwKT1
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/danish.rb#34
PragmaticSegmenter::Languages::Danish::Numbers::NumberPeriodSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#5
module PragmaticSegmenter::Languages::Deutsch
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#8
module PragmaticSegmenter::Languages::Deutsch::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#9
PragmaticSegmenter::Languages::Deutsch::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#10
PragmaticSegmenter::Languages::Deutsch::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#11
PragmaticSegmenter::Languages::Deutsch::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#63
class PragmaticSegmenter::Languages::Deutsch::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#70
  def replace; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#86
  def scan_for_replacements(txt, am, index, character_array); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#65
PragmaticSegmenter::Languages::Deutsch::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/TkZomF9tTM
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#21
PragmaticSegmenter::Languages::Deutsch::BETWEEN_DOUBLE_QUOTES_DE_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/OdcXBsub0w
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#15
PragmaticSegmenter::Languages::Deutsch::BETWEEN_UNCONVENTIONAL_DOUBLE_QUOTE_DE_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#92
class PragmaticSegmenter::Languages::Deutsch::BetweenPunctuation < ::PragmaticSegmenter::BetweenPunctuation
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#95
  def btwn_dbl_quote(txt); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#38
PragmaticSegmenter::Languages::Deutsch::MONTHS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#24
module PragmaticSegmenter::Languages::Deutsch::Numbers; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#31
PragmaticSegmenter::Languages::Deutsch::Numbers::All = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/ityNMwdghj
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#29
PragmaticSegmenter::Languages::Deutsch::Numbers::NegativeNumberPeriodSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/hZxoyQwKT1
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#26
PragmaticSegmenter::Languages::Deutsch::Numbers::NumberPeriodSpaceRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#46
class PragmaticSegmenter::Languages::Deutsch::Processor < ::PragmaticSegmenter::Processor
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#49
  def replace_numbers; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#55
  def replace_period_in_deutsch_dates; end
end

# Rubular: http://rubular.com/r/2UskIupGgP
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#18
PragmaticSegmenter::Languages::Deutsch::SPLIT_DOUBLE_QUOTES_DE_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/iUNSkCuso0
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#44
PragmaticSegmenter::Languages::Deutsch::SingleLowerCaseLetterAtStartOfLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/B4X33QKIL8
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/deutsch.rb#41
PragmaticSegmenter::Languages::Deutsch::SingleLowerCaseLetterRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/dutch.rb#5
module PragmaticSegmenter::Languages::Dutch
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/dutch.rb#8
module PragmaticSegmenter::Languages::Dutch::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/dutch.rb#9
PragmaticSegmenter::Languages::Dutch::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/dutch.rb#11
PragmaticSegmenter::Languages::Dutch::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/dutch.rb#10
PragmaticSegmenter::Languages::Dutch::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#5
module PragmaticSegmenter::Languages::English
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#25
class PragmaticSegmenter::Languages::English::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#26
PragmaticSegmenter::Languages::English::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#8
class PragmaticSegmenter::Languages::English::Cleaner < ::PragmaticSegmenter::Cleaner
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#9
  def clean; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#20
  def abbreviations; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/english.rb#16
  def clean_quotations; end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#5
module PragmaticSegmenter::Languages::French
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#8
module PragmaticSegmenter::Languages::French::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#9
PragmaticSegmenter::Languages::French::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#11
PragmaticSegmenter::Languages::French::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#10
PragmaticSegmenter::Languages::French::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#14
class PragmaticSegmenter::Languages::French::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/french.rb#15
PragmaticSegmenter::Languages::French::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/greek.rb#5
module PragmaticSegmenter::Languages::Greek
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/greek.rb#11
class PragmaticSegmenter::Languages::Greek::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/greek.rb#12
PragmaticSegmenter::Languages::Greek::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/greek.rb#9
PragmaticSegmenter::Languages::Greek::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/greek.rb#8
PragmaticSegmenter::Languages::Greek::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/hindi.rb#5
module PragmaticSegmenter::Languages::Hindi
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/hindi.rb#11
class PragmaticSegmenter::Languages::Hindi::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/hindi.rb#12
PragmaticSegmenter::Languages::Hindi::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/hindi.rb#9
PragmaticSegmenter::Languages::Hindi::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/hindi.rb#8
PragmaticSegmenter::Languages::Hindi::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#5
module PragmaticSegmenter::Languages::Italian
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#8
module PragmaticSegmenter::Languages::Italian::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#9
PragmaticSegmenter::Languages::Italian::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#11
PragmaticSegmenter::Languages::Italian::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#10
PragmaticSegmenter::Languages::Italian::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#14
class PragmaticSegmenter::Languages::Italian::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/italian.rb#15
PragmaticSegmenter::Languages::Italian::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#5
module PragmaticSegmenter::Languages::Japanese
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#24
class PragmaticSegmenter::Languages::Japanese::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#25
PragmaticSegmenter::Languages::Japanese::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#28
class PragmaticSegmenter::Languages::Japanese::BetweenPunctuation < ::PragmaticSegmenter::BetweenPunctuation
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#49
  def sub_punctuation_between_parens_ja(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#36
  def sub_punctuation_between_quotes_and_parens(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#42
  def sub_punctuation_between_quotes_ja(txt); end
end

# Rubular: http://rubular.com/r/EjHcZn5ZSG
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#33
PragmaticSegmenter::Languages::Japanese::BetweenPunctuation::BETWEEN_PARENS_JA_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/GnjOmry5Z2
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#30
PragmaticSegmenter::Languages::Japanese::BetweenPunctuation::BETWEEN_QUOTE_JA_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#8
class PragmaticSegmenter::Languages::Japanese::Cleaner < ::PragmaticSegmenter::Cleaner
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#12
  def clean; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#19
  def remove_newline_in_middle_of_word; end
end

# Rubular: http://rubular.com/r/N4kPuJgle7
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/japanese.rb#10
PragmaticSegmenter::Languages::Japanese::Cleaner::NewLineInMiddleOfWordRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#5
module PragmaticSegmenter::Languages::Kazakh
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#10
module PragmaticSegmenter::Languages::Kazakh::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#11
PragmaticSegmenter::Languages::Kazakh::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#13
PragmaticSegmenter::Languages::Kazakh::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#12
PragmaticSegmenter::Languages::Kazakh::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#30
class PragmaticSegmenter::Languages::Kazakh::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#36
  def replace; end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#31
PragmaticSegmenter::Languages::Kazakh::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#33
PragmaticSegmenter::Languages::Kazakh::AbbreviationReplacer::SingleUpperCaseCyrillicLetterAtStartOfLineRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#34
PragmaticSegmenter::Languages::Kazakh::AbbreviationReplacer::SingleUpperCaseCyrillicLetterRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#8
PragmaticSegmenter::Languages::Kazakh::MULTI_PERIOD_ABBREVIATION_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#16
class PragmaticSegmenter::Languages::Kazakh::Processor < ::PragmaticSegmenter::Processor
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#24
  def between_punctuation(txt); end
end

# Rubular: http://rubular.com/r/lixxP7puSa
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#22
PragmaticSegmenter::Languages::Kazakh::Processor::ExclamationMarkFollowedByDashLowercaseRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/WRWy56Z5zp
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/kazakh.rb#20
PragmaticSegmenter::Languages::Kazakh::Processor::QuestionMarkFollowedByDashLowercaseRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages.rb#33
PragmaticSegmenter::Languages::LANGUAGE_CODES = T.let(T.unsafe(nil), Hash)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#5
module PragmaticSegmenter::Languages::Persian
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#14
class PragmaticSegmenter::Languages::Persian::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#19
  def scan_for_replacements(txt, am, index, character_array); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#15
PragmaticSegmenter::Languages::Persian::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#9
PragmaticSegmenter::Languages::Persian::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#11
PragmaticSegmenter::Languages::Persian::ReplaceColonBetweenNumbersRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#12
PragmaticSegmenter::Languages::Persian::ReplaceNonSentenceBoundaryCommaRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/persian.rb#8
PragmaticSegmenter::Languages::Persian::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#5
module PragmaticSegmenter::Languages::Polish
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#8
module PragmaticSegmenter::Languages::Polish::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#9
PragmaticSegmenter::Languages::Polish::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#11
PragmaticSegmenter::Languages::Polish::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#10
PragmaticSegmenter::Languages::Polish::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#14
class PragmaticSegmenter::Languages::Polish::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/polish.rb#15
PragmaticSegmenter::Languages::Polish::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#5
module PragmaticSegmenter::Languages::Russian
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#8
module PragmaticSegmenter::Languages::Russian::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#9
PragmaticSegmenter::Languages::Russian::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#11
PragmaticSegmenter::Languages::Russian::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#10
PragmaticSegmenter::Languages::Russian::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#14
class PragmaticSegmenter::Languages::Russian::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer
  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#19
  def replace_period_of_abbr(txt, abbr); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/russian.rb#15
PragmaticSegmenter::Languages::Russian::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#5
module PragmaticSegmenter::Languages::Spanish
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#8
module PragmaticSegmenter::Languages::Spanish::Abbreviation; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#9
PragmaticSegmenter::Languages::Spanish::Abbreviation::ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#11
PragmaticSegmenter::Languages::Spanish::Abbreviation::NUMBER_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#10
PragmaticSegmenter::Languages::Spanish::Abbreviation::PREPOSITIVE_ABBREVIATIONS = T.let(T.unsafe(nil), Set)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#14
class PragmaticSegmenter::Languages::Spanish::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/spanish.rb#15
PragmaticSegmenter::Languages::Spanish::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/urdu.rb#5
module PragmaticSegmenter::Languages::Urdu
  include ::PragmaticSegmenter::Languages::Common
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/urdu.rb#11
class PragmaticSegmenter::Languages::Urdu::AbbreviationReplacer < ::PragmaticSegmenter::AbbreviationReplacer; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/urdu.rb#12
PragmaticSegmenter::Languages::Urdu::AbbreviationReplacer::SENTENCE_STARTERS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/urdu.rb#9
PragmaticSegmenter::Languages::Urdu::Punctuations = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/languages/urdu.rb#8
PragmaticSegmenter::Languages::Urdu::SENTENCE_BOUNDARY_REGEX = T.let(T.unsafe(nil), Regexp)

# This class searches for a list within a string and adds
# newlines before each list item.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#7
class PragmaticSegmenter::List
  # @return [List] a new instance of List
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#50
  def initialize(text:); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#54
  def add_line_break; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#61
  def replace_parens; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#49
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#137
  def add_line_breaks_for_alphabetical_list_with_parens(roman_numeral: T.unsafe(nil)); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#133
  def add_line_breaks_for_alphabetical_list_with_periods(roman_numeral: T.unsafe(nil)); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#106
  def add_line_breaks_for_numbered_list_with_parens; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#94
  def add_line_breaks_for_numbered_list_with_periods; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#80
  def format_alphabetical_lists; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#68
  def format_numbered_list_with_parens; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#74
  def format_numbered_list_with_periods; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#85
  def format_roman_numeral_lists; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#185
  def iterate_alphabet_array(regex, parens: T.unsafe(nil), roman_numeral: T.unsafe(nil)); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#167
  def last_array_item_replacement(a, i, alphabet, list_array, parens); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#175
  def other_items_replacement(a, i, alphabet, list_array, parens); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#143
  def replace_alphabet_list(a); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#149
  def replace_alphabet_list_parens(a); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#159
  def replace_correct_alphabet_list(a, parens); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#100
  def replace_parens_in_numbered_list; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#90
  def replace_periods_in_numbered_list; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#112
  def scan_lists(regex1, regex2, replacement, strip: T.unsafe(nil)); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#123
  def substitute_found_list_items(regex, a, strip, replacement); end
end

# Rubular: http://rubular.com/r/wMpnVedEIb
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#42
PragmaticSegmenter::List::ALPHABETICAL_LIST_LETTERS_AND_PERIODS_REGEX = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/Gu5rQapywf
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#16
PragmaticSegmenter::List::ALPHABETICAL_LIST_WITH_PARENS = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/XcpaJKH0sz
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#12
PragmaticSegmenter::List::ALPHABETICAL_LIST_WITH_PERIODS = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/NsNFSqrNvJ
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#38
PragmaticSegmenter::List::EXTRACT_ALPHABETICAL_LIST_LETTERS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#9
PragmaticSegmenter::List::LATIN_NUMERALS = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#20
PragmaticSegmenter::List::ListMarkerRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#35
PragmaticSegmenter::List::NUMBERED_LIST_PARENS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#31
PragmaticSegmenter::List::NUMBERED_LIST_REGEX_1 = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#33
PragmaticSegmenter::List::NUMBERED_LIST_REGEX_2 = T.let(T.unsafe(nil), Regexp)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#8
PragmaticSegmenter::List::ROMAN_NUMERALS = T.let(T.unsafe(nil), Array)

# Rubular: http://rubular.com/r/GcnmQt4a3I
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#46
PragmaticSegmenter::List::ROMAN_NUMERALS_IN_PARENTHESES = T.let(T.unsafe(nil), Regexp)

# Rubular: http://rubular.com/r/Wv4qLdoPx7
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#23
PragmaticSegmenter::List::SpaceBetweenListItemsFirstRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/AizHXC6HxK
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#26
PragmaticSegmenter::List::SpaceBetweenListItemsSecondRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# Rubular: http://rubular.com/r/GE5q6yID2j
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#29
PragmaticSegmenter::List::SpaceBetweenListItemsThirdRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/list.rb#19
PragmaticSegmenter::List::SubstituteListPeriodRule = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# This class processing segmenting the text.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#14
class PragmaticSegmenter::Processor
  # @return [Processor] a new instance of Processor
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#17
  def initialize(language: T.unsafe(nil)); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#21
  def process(text:); end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#16
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#109
  def abbreviations_replacer; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#129
  def between_punctuation(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#121
  def between_punctuation_processor; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#61
  def check_for_parens_between_quotes(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#83
  def check_for_punctuation(txt); end

  # @return [Boolean]
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#78
  def consecutive_underscore?(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#45
  def post_process_segments(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#91
  def process_text(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#117
  def replace_abbreviations; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#68
  def replace_continuous_punctuation; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#105
  def replace_numbers; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#74
  def replace_periods_before_numeric_references; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#133
  def sentence_boundary_punctuation(txt); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/processor.rb#35
  def split_into_segments; end
end

# This class replaces punctuation that is typically a sentence boundary
# but in this case is not a sentence boundary.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#7
class PragmaticSegmenter::PunctuationReplacer
  # @return [PunctuationReplacer] a new instance of PunctuationReplacer
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#34
  def initialize(text:, matches_array:, match_type: T.unsafe(nil)); end

  # Returns the value of attribute match_type.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#33
  def match_type; end

  # Returns the value of attribute matches_array.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#33
  def matches_array; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#40
  def replace; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#33
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#46
  def replace_punctuation(array); end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#65
  def sub_characters(string, char_a, char_b); end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#8
module PragmaticSegmenter::PunctuationReplacer::Rules; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#9
module PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#16
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::All = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#14
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::Dash = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#12
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::LeftBracket = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#10
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::LeftParen = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#13
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::RightBracket = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#11
PragmaticSegmenter::PunctuationReplacer::Rules::EscapeRegexReservedCharacters::RightParen = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#20
module PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters; end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#27
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::All = T.let(T.unsafe(nil), Array)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#25
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::SubDash = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#23
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::SubLeftBracket = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#21
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::SubLeftParen = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#24
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::SubRightBracket = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/punctuation_replacer.rb#22
PragmaticSegmenter::PunctuationReplacer::Rules::SubEscapedRegexReservedCharacters::SubRightParen = T.let(T.unsafe(nil), PragmaticSegmenter::Rule)

# source://pragmatic_segmenter//lib/pragmatic_segmenter/types.rb#4
class PragmaticSegmenter::Rule < ::Struct
  class << self
    # source://pragmatic_segmenter//lib/pragmatic_segmenter/types.rb#6
    def apply(str, *rules); end
  end
end

# This class segments a text into an array of sentences.
#
# source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#8
class PragmaticSegmenter::Segmenter
  # @return [Segmenter] a new instance of Segmenter
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#11
  def initialize(text:, language: T.unsafe(nil), doc_type: T.unsafe(nil), clean: T.unsafe(nil)); end

  # Returns the value of attribute doc_type.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#9
  def doc_type; end

  # Returns the value of attribute language.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#9
  def language; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#24
  def segment; end

  # Returns the value of attribute text.
  #
  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#9
  def text; end

  private

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#37
  def cleaner; end

  # source://pragmatic_segmenter//lib/pragmatic_segmenter/segmenter.rb#31
  def processor; end
end

# source://pragmatic_segmenter//lib/pragmatic_segmenter/version.rb#4
PragmaticSegmenter::VERSION = T.let(T.unsafe(nil), String)
