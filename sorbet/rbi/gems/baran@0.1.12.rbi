# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `baran` gem.
# Please instead update this file by running `bin/tapioca gem baran`.


# source://baran//lib/baran/version.rb#3
module Baran; end

# source://baran//lib/baran/character_text_splitter.rb#4
class Baran::CharacterTextSplitter < ::Baran::TextSplitter
  # @return [CharacterTextSplitter] a new instance of CharacterTextSplitter
  #
  # source://baran//lib/baran/character_text_splitter.rb#7
  def initialize(chunk_size: T.unsafe(nil), chunk_overlap: T.unsafe(nil), separator: T.unsafe(nil)); end

  # Returns the value of attribute separator.
  #
  # source://baran//lib/baran/character_text_splitter.rb#5
  def separator; end

  # Sets the attribute separator
  #
  # @param value the value to set the attribute separator to.
  #
  # source://baran//lib/baran/character_text_splitter.rb#5
  def separator=(_arg0); end

  # source://baran//lib/baran/character_text_splitter.rb#12
  def splitted(text); end
end

# source://baran//lib/baran.rb#10
class Baran::Error < ::StandardError; end

# source://baran//lib/baran/markdown_splitter.rb#4
class Baran::MarkdownSplitter < ::Baran::RecursiveCharacterTextSplitter
  # @return [MarkdownSplitter] a new instance of MarkdownSplitter
  #
  # source://baran//lib/baran/markdown_splitter.rb#5
  def initialize(chunk_size: T.unsafe(nil), chunk_overlap: T.unsafe(nil)); end
end

# source://baran//lib/baran/recursive_character_text_splitter.rb#4
class Baran::RecursiveCharacterTextSplitter < ::Baran::TextSplitter
  # @return [RecursiveCharacterTextSplitter] a new instance of RecursiveCharacterTextSplitter
  #
  # source://baran//lib/baran/recursive_character_text_splitter.rb#7
  def initialize(chunk_size: T.unsafe(nil), chunk_overlap: T.unsafe(nil), separators: T.unsafe(nil)); end

  # Returns the value of attribute separators.
  #
  # source://baran//lib/baran/recursive_character_text_splitter.rb#5
  def separators; end

  # Sets the attribute separators
  #
  # @param value the value to set the attribute separators to.
  #
  # source://baran//lib/baran/recursive_character_text_splitter.rb#5
  def separators=(_arg0); end

  # source://baran//lib/baran/recursive_character_text_splitter.rb#12
  def splitted(text); end
end

# source://baran//lib/baran/text_splitter.rb#4
class Baran::TextSplitter
  # @return [TextSplitter] a new instance of TextSplitter
  #
  # source://baran//lib/baran/text_splitter.rb#7
  def initialize(chunk_size: T.unsafe(nil), chunk_overlap: T.unsafe(nil)); end

  # Returns the value of attribute chunk_overlap.
  #
  # source://baran//lib/baran/text_splitter.rb#5
  def chunk_overlap; end

  # Sets the attribute chunk_overlap
  #
  # @param value the value to set the attribute chunk_overlap to.
  #
  # source://baran//lib/baran/text_splitter.rb#5
  def chunk_overlap=(_arg0); end

  # Returns the value of attribute chunk_size.
  #
  # source://baran//lib/baran/text_splitter.rb#5
  def chunk_size; end

  # Sets the attribute chunk_size
  #
  # @param value the value to set the attribute chunk_size to.
  #
  # source://baran//lib/baran/text_splitter.rb#5
  def chunk_size=(_arg0); end

  # source://baran//lib/baran/text_splitter.rb#17
  def chunks(text, metadata: T.unsafe(nil)); end

  # source://baran//lib/baran/text_splitter.rb#31
  def joined(items, separator); end

  # source://baran//lib/baran/text_splitter.rb#36
  def merged(splits, separator); end

  # @raise [NotImplementedError]
  #
  # source://baran//lib/baran/text_splitter.rb#13
  def splitted(text); end
end

# source://baran//lib/baran/version.rb#4
Baran::VERSION = T.let(T.unsafe(nil), String)
