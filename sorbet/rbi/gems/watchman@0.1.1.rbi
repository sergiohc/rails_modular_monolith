# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `watchman` gem.
# Please instead update this file by running `bin/tapioca gem watchman`.


# source://watchman//lib/watchman.rb#3
module Watchman; end

# source://watchman//lib/watchman/call.rb#2
class Watchman::Call
  # @return [Call] a new instance of Call
  #
  # source://watchman//lib/watchman/call.rb#3
  def initialize(page); end

  # source://watchman//lib/watchman/call.rb#17
  def address; end

  # source://watchman//lib/watchman/call.rb#48
  def apparatus; end

  # source://watchman//lib/watchman/call.rb#88
  def cross_street_1; end

  # source://watchman//lib/watchman/call.rb#96
  def cross_street_2; end

  # source://watchman//lib/watchman/call.rb#84
  def cross_streets; end

  # source://watchman//lib/watchman/call.rb#108
  def dispatch_code; end

  # source://watchman//lib/watchman/call.rb#116
  def fire_area; end

  # source://watchman//lib/watchman/call.rb#112
  def grid; end

  # source://watchman//lib/watchman/call.rb#21
  def incident_number; end

  # source://watchman//lib/watchman/call.rb#56
  def incidental_notes; end

  # source://watchman//lib/watchman/call.rb#25
  def nature; end

  # source://watchman//lib/watchman/call.rb#11
  def notes; end

  # source://watchman//lib/watchman/call.rb#104
  def priority; end

  # source://watchman//lib/watchman/call.rb#52
  def pro_qa_notes; end

  # source://watchman//lib/watchman/call.rb#7
  def raw_notes; end

  # source://watchman//lib/watchman/call.rb#36
  def response_level; end

  # source://watchman//lib/watchman/call.rb#60
  def spliced_notes; end

  # source://watchman//lib/watchman/call.rb#120
  def time_of_alarm; end

  # source://watchman//lib/watchman/call.rb#128
  def time_of_first_unit_on_scene; end

  private

  # @return [Boolean]
  #
  # source://watchman//lib/watchman/call.rb#148
  def is_active_call?; end

  # @return [Boolean]
  #
  # source://watchman//lib/watchman/call.rb#152
  def is_prior_call?; end

  # source://watchman//lib/watchman/call.rb#156
  def main_table_path; end

  # source://watchman//lib/watchman/call.rb#140
  def nature_cell_text; end

  # source://watchman//lib/watchman/call.rb#168
  def parse_time_at(path); end

  # source://watchman//lib/watchman/call.rb#160
  def xpath(path); end

  # source://watchman//lib/watchman/call.rb#164
  def xpath_text(path); end
end

# source://watchman//lib/watchman/call.rb#29
Watchman::Call::ResponseLevelMap = T.let(T.unsafe(nil), Hash)

# source://watchman//lib/watchman/call_watcher.rb#2
class Watchman::CallWatcher
  # @return [CallWatcher] a new instance of CallWatcher
  #
  # source://watchman//lib/watchman/call_watcher.rb#4
  def initialize; end

  # source://watchman//lib/watchman/call_watcher.rb#16
  def current_call_incident_numbers; end

  # source://watchman//lib/watchman/call_watcher.rb#8
  def info_for(incident_number); end
end

# source://watchman//lib/watchman/client.rb#2
class Watchman::Client
  # source://watchman//lib/watchman/client.rb#23
  def add_cookie(cookie, key); end

  # source://watchman//lib/watchman/client.rb#11
  def agent; end

  # source://watchman//lib/watchman/client.rb#7
  def get(path); end

  class << self
    # Returns the value of attribute host.
    #
    # source://watchman//lib/watchman/client.rb#4
    def host; end

    # Sets the attribute host
    #
    # @param value the value to set the attribute host to.
    #
    # source://watchman//lib/watchman/client.rb#4
    def host=(_arg0); end

    # Returns the value of attribute password.
    #
    # source://watchman//lib/watchman/client.rb#4
    def password; end

    # Sets the attribute password
    #
    # @param value the value to set the attribute password to.
    #
    # source://watchman//lib/watchman/client.rb#4
    def password=(_arg0); end

    # Returns the value of attribute username.
    #
    # source://watchman//lib/watchman/client.rb#4
    def username; end

    # Sets the attribute username
    #
    # @param value the value to set the attribute username to.
    #
    # source://watchman//lib/watchman/client.rb#4
    def username=(_arg0); end
  end
end

# source://watchman//lib/watchman/medic_watcher.rb#2
class Watchman::MedicWatcher
  # @return [MedicWatcher] a new instance of MedicWatcher
  #
  # source://watchman//lib/watchman/medic_watcher.rb#5
  def initialize; end

  # source://watchman//lib/watchman/medic_watcher.rb#21
  def city_status; end

  # source://watchman//lib/watchman/medic_watcher.rb#25
  def county_status; end

  # source://watchman//lib/watchman/medic_watcher.rb#13
  def page; end

  # source://watchman//lib/watchman/medic_watcher.rb#9
  def raw_page; end

  # source://watchman//lib/watchman/medic_watcher.rb#29
  def status_of(medic); end

  private

  # source://watchman//lib/watchman/medic_watcher.rb#38
  def cookie; end

  # source://watchman//lib/watchman/medic_watcher.rb#42
  def count(regex, status = T.unsafe(nil)); end
end

# source://watchman//lib/watchman/medic_watcher.rb#3
Watchman::MedicWatcher::STATUSI = T.let(T.unsafe(nil), Array)
