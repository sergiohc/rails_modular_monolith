# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `make_menu` gem.
# Please instead update this file by running `bin/tapioca gem make_menu`.


# source://make_menu//lib/make_menu/console/prompter.rb#5
module MakeMenu
  class << self
    # source://make_menu//lib/make_menu.rb#18
    def prompt(text = T.unsafe(nil), obscure: T.unsafe(nil), value_from_file: T.unsafe(nil)); end

    # source://make_menu//lib/make_menu.rb#14
    def run(makefile = T.unsafe(nil), &block); end
  end
end

# A set of BADGES to display above the menu
#
# source://make_menu//lib/make_menu/badge_set.rb#5
class MakeMenu::BadgeSet
  # @return [BadgeSet] a new instance of BadgeSet
  #
  # source://make_menu//lib/make_menu/badge_set.rb#6
  def initialize; end

  # Add a new badge to the set
  #
  # @param label [String] Optional label to print to the left of the badge value
  # @param block [Proc] Block to run each time the menu is re-drawn
  #
  # source://make_menu//lib/make_menu/badge_set.rb#13
  def add(label = T.unsafe(nil), &block); end

  # Print badges in a wrapping horizontal row
  #
  # source://make_menu//lib/make_menu/badge_set.rb#21
  def display; end
end

# source://make_menu//lib/make_menu/builder.rb#4
module MakeMenu::Builder
  class << self
    # Parse `makefile` and add all annotated targets to `menu`
    #
    # source://make_menu//lib/make_menu/builder.rb#6
    def build(makefile, menu); end
  end
end

# source://make_menu//lib/make_menu/console/prompter.rb#6
module MakeMenu::Console; end

# Monkeypatch for `String`, adds methods to change console text colo(u)r
#
# source://make_menu//lib/make_menu/console/color_string.rb#6
module MakeMenu::Console::ColorString
  # Align the string, ignoring color code characters which would otherwise mess up String#center, etc.
  #
  # source://make_menu//lib/make_menu/console/color_string.rb#110
  def align(alignment = T.unsafe(nil), width: T.unsafe(nil), char: T.unsafe(nil), pad_right: T.unsafe(nil)); end

  # Align each line of a string
  #
  # source://make_menu//lib/make_menu/console/color_string.rb#128
  def align_block(alignment = T.unsafe(nil)); end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def black; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def black_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def blink; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def blue; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def blue_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def bold; end

  # Apply specified color code to the String
  #
  # @param color_code [Array, Symbol, Integer] Can be a key in the COLORS array,
  #   an integer ANSI code for text color, or an array of either to be applied in order
  # @return [String] String enclosed by formatting characters
  #
  # source://make_menu//lib/make_menu/console/color_string.rb#63
  def color(color_code); end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def cyan; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def cyan_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def dark; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def dark_grey; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def dark_grey_bg; end

  # Remove color codes from the string
  #
  # source://make_menu//lib/make_menu/console/color_string.rb#105
  def decolor; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def green; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def green_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def grey; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def grey_bg; end

  # Changes all occurrences of `char` to `fore_color`
  # and all other characters to `back_color`
  #
  # source://make_menu//lib/make_menu/console/color_string.rb#76
  def highlight(char, fore_color, back_color); end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def invert; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_blue; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_blue_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_cyan; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_cyan_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_green; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_green_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_grey; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_grey_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_magenta; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_magenta_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_red; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_red_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_yellow; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def light_yellow_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def magenta; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def magenta_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def normal; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def red; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def red_bg; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def underline; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def white; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def yellow; end

  # source://make_menu//lib/make_menu/console/color_string.rb#54
  def yellow_bg; end
end

# source://make_menu//lib/make_menu/console/color_string.rb#7
MakeMenu::Console::ColorString::COLORS = T.let(T.unsafe(nil), Hash)

# source://make_menu//lib/make_menu/console/prompter.rb#7
module MakeMenu::Console::Prompter
  class << self
    # source://make_menu//lib/make_menu/console/prompter.rb#28
    def prompt(text = T.unsafe(nil), input: T.unsafe(nil), obscure: T.unsafe(nil), value_color: T.unsafe(nil)); end

    # source://make_menu//lib/make_menu/console/prompter.rb#10
    def prompt_and_save(text, file:, obscure: T.unsafe(nil)); end
  end
end

# source://make_menu//lib/make_menu/console/prompter.rb#8
class MakeMenu::Console::Prompter::PressedEscape < ::StandardError; end

# A set of FIELDS to display above the menu
#
# source://make_menu//lib/make_menu/field_set.rb#5
class MakeMenu::FieldSet
  # @return [FieldSet] a new instance of FieldSet
  #
  # source://make_menu//lib/make_menu/field_set.rb#6
  def initialize; end

  # Add a new field to the set
  #
  # @param label [String] Optional label to print to the left of the field value
  # @param value_from_file [String, Symbol] If set, read the field value from a file
  #   in the current directory. A String is used literally, a Symbol is assumed
  #   to be a hidden file (i.e. starts with `.`)
  # @param color [String, Symbol, Integer] Formatting to apply to the value
  # @param none [String] Text to display if the file does not exist, or is empty
  # @param block [Proc] Block to return the value to display
  #
  # source://make_menu//lib/make_menu/field_set.rb#19
  def add(label = T.unsafe(nil), value_from_file: T.unsafe(nil), color: T.unsafe(nil), none: T.unsafe(nil), &block); end

  # Print fields in an aligned vertical stack
  #
  # source://make_menu//lib/make_menu/field_set.rb#44
  def display; end

  private

  # Calculate maximum sizes of labels and rendered values
  #
  # source://make_menu//lib/make_menu/field_set.rb#68
  def build; end
end

# This class builds and displays a number-selection menu from a Makefile
# then prompts for a number and executes the target.
#
# source://make_menu//lib/make_menu/menu.rb#13
class MakeMenu::Menu
  # @return [Menu] a new instance of Menu
  #
  # source://make_menu//lib/make_menu/menu.rb#14
  def initialize(makefile); end

  # source://make_menu//lib/make_menu/menu.rb#115
  def add_badge(label = T.unsafe(nil), &block); end

  # source://make_menu//lib/make_menu/menu.rb#103
  def add_field(label = T.unsafe(nil), value_from_file: T.unsafe(nil), color: T.unsafe(nil), none: T.unsafe(nil), &block); end

  # source://make_menu//lib/make_menu/menu.rb#137
  def add_group(group); end

  # source://make_menu//lib/make_menu/menu.rb#142
  def add_item(item); end

  # source://make_menu//lib/make_menu/menu.rb#119
  def badges; end

  # @return [Boolean]
  #
  # source://make_menu//lib/make_menu/menu.rb#159
  def badges_first?; end

  # @return [Boolean]
  #
  # source://make_menu//lib/make_menu/menu.rb#151
  def clear_screen?; end

  # source://make_menu//lib/make_menu/menu.rb#163
  def colorize(text); end

  # source://make_menu//lib/make_menu/menu.rb#123
  def display_badges; end

  # source://make_menu//lib/make_menu/menu.rb#111
  def display_fields; end

  # source://make_menu//lib/make_menu/menu.rb#94
  def display_header; end

  # source://make_menu//lib/make_menu/menu.rb#73
  def execute_option(selected); end

  # source://make_menu//lib/make_menu/menu.rb#107
  def fields; end

  # source://make_menu//lib/make_menu/menu.rb#147
  def group_title_color; end

  # Returns the value of attribute groups.
  #
  # source://make_menu//lib/make_menu/menu.rb#33
  def groups; end

  # source://make_menu//lib/make_menu/menu.rb#90
  def header(&block); end

  # Returns the value of attribute highlights.
  #
  # source://make_menu//lib/make_menu/menu.rb#132
  def highlights; end

  # Returns the value of attribute items.
  #
  # source://make_menu//lib/make_menu/menu.rb#33
  def items; end

  # Returns the value of attribute makefile.
  #
  # source://make_menu//lib/make_menu/menu.rb#33
  def makefile; end

  # Returns the value of attribute options.
  #
  # source://make_menu//lib/make_menu/menu.rb#127
  def options; end

  # @return [Boolean]
  #
  # source://make_menu//lib/make_menu/menu.rb#155
  def pause_on_success?; end

  # @yield [_self]
  # @yieldparam _self [MakeMenu::Menu] the object that the method was called on
  #
  # source://make_menu//lib/make_menu/menu.rb#35
  def run; end
end

# This class represents an option in the menu which runs a target from the Makefile
#
# source://make_menu//lib/make_menu/menu_item.rb#5
class MakeMenu::MenuItem
  # @return [MenuItem] a new instance of MenuItem
  #
  # source://make_menu//lib/make_menu/menu_item.rb#8
  def initialize(option_number = T.unsafe(nil), target = T.unsafe(nil), description = T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://make_menu//lib/make_menu/menu_item.rb#14
  def description; end

  # source://make_menu//lib/make_menu/menu_item.rb#16
  def execute; end

  # Returns the value of attribute option_number.
  #
  # source://make_menu//lib/make_menu/menu_item.rb#14
  def option_number; end

  # Returns the value of attribute target.
  #
  # source://make_menu//lib/make_menu/menu_item.rb#14
  def target; end

  # @return [String] Text to display for this item
  #
  # source://make_menu//lib/make_menu/menu_item.rb#34
  def to_s; end

  # @return [Integer] Number of characters required to display the item
  #
  # source://make_menu//lib/make_menu/menu_item.rb#29
  def width; end
end

# source://make_menu//lib/make_menu/menu_item.rb#6
MakeMenu::MenuItem::INDENT = T.let(T.unsafe(nil), Integer)

# This class represents a group of menu items, with a title line
#
# source://make_menu//lib/make_menu/menu_item_group.rb#7
class MakeMenu::MenuItemGroup
  # @param title [String] The title text to display at the top of the group
  # @return [MenuItemGroup] a new instance of MenuItemGroup
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#11
  def initialize(title = T.unsafe(nil)); end

  # Add a new item to the group
  #
  # @param item [MenuItem] The item to add
  # @return [MenuItem] The added item
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#21
  def add_item(item); end

  # @return [Integer] Number of rows needed to display the group
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#32
  def height; end

  # Returns the value of attribute items.
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#16
  def items; end

  # Returns the value of attribute title.
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#16
  def title; end

  # @return [String] Text representation of group
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#37
  def to_s; end

  # @return [Integer] Number of characters needed to display the widest item
  #
  # source://make_menu//lib/make_menu/menu_item_group.rb#27
  def width; end
end

# source://make_menu//lib/make_menu/menu_item_group.rb#8
MakeMenu::MenuItemGroup::INDENT = T.let(T.unsafe(nil), Integer)

# source://make_menu//lib/make_menu/text/column.rb#4
module MakeMenu::Text; end

# A column of text with a fixed with
#
# source://make_menu//lib/make_menu/text/column.rb#8
class MakeMenu::Text::Column
  # @return [Column] a new instance of Column
  #
  # source://make_menu//lib/make_menu/text/column.rb#9
  def initialize; end

  # Add a block of text to the column. Each row will be padded to the column width
  #
  # source://make_menu//lib/make_menu/text/column.rb#18
  def add(text); end

  # @return [Boolean] True if the column is empty
  #
  # source://make_menu//lib/make_menu/text/column.rb#38
  def empty?; end

  # @return [Integer] The number of rows in the column
  #
  # source://make_menu//lib/make_menu/text/column.rb#33
  def height; end

  # @return [String] The row at the specified index
  #
  # source://make_menu//lib/make_menu/text/column.rb#28
  def row(index); end

  # Returns the value of attribute row_index.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def row_index; end

  # Sets the attribute row_index
  #
  # @param value the value to set the attribute row_index to.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def row_index=(_arg0); end

  # Returns the value of attribute rows.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def rows; end

  # Sets the attribute rows
  #
  # @param value the value to set the attribute rows to.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def rows=(_arg0); end

  # Returns the value of attribute width.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def width; end

  # Sets the attribute width
  #
  # @param value the value to set the attribute width to.
  #
  # source://make_menu//lib/make_menu/text/column.rb#15
  def width=(_arg0); end
end

# source://make_menu//lib/make_menu/text/column.rb#5
MakeMenu::Text::SPACING = T.let(T.unsafe(nil), Integer)

# This class displays the menu groups in columns across the screen.
# Each group is kept together in a column, and once a column has exceeded the
# calculated height, a new column is added.
#
# source://make_menu//lib/make_menu/text/table.rb#10
class MakeMenu::Text::Table
  # @param groups [Array<MenuItemGroup>]
  # @return [Table] a new instance of Table
  #
  # source://make_menu//lib/make_menu/text/table.rb#14
  def initialize(groups); end

  # @return [String] The entire table, centered on the screen
  #
  # source://make_menu//lib/make_menu/text/table.rb#22
  def to_s; end

  private

  # Add a block of text to the current column. If the column is now larger than
  # the minimum height, a new column is added
  #
  # source://make_menu//lib/make_menu/text/table.rb#60
  def add_text_block(text); end

  # Build columns from groups
  #
  # source://make_menu//lib/make_menu/text/table.rb#51
  def build_table; end

  # Calculate width and minimum height of columns
  #
  # source://make_menu//lib/make_menu/text/table.rb#43
  def calculate_table_dimensions; end

  # Add a new column to the table
  #
  # source://make_menu//lib/make_menu/text/table.rb#66
  def column_break; end

  # Returns the value of attribute column_height.
  #
  # source://make_menu//lib/make_menu/text/table.rb#38
  def column_height; end

  # Returns the value of attribute column_width.
  #
  # source://make_menu//lib/make_menu/text/table.rb#38
  def column_width; end

  # Returns the value of attribute columns.
  #
  # source://make_menu//lib/make_menu/text/table.rb#38
  def columns; end

  # Returns the value of attribute current_column.
  #
  # source://make_menu//lib/make_menu/text/table.rb#40
  def current_column; end

  # Sets the attribute current_column
  #
  # @param value the value to set the attribute current_column to.
  #
  # source://make_menu//lib/make_menu/text/table.rb#40
  def current_column=(_arg0); end

  # Returns the value of attribute groups.
  #
  # source://make_menu//lib/make_menu/text/table.rb#38
  def groups; end

  # @return [Integer] Maximum column height (rows)
  #
  # source://make_menu//lib/make_menu/text/table.rb#72
  def max_height; end
end

# source://make_menu//lib/make_menu/text/table.rb#11
MakeMenu::Text::Table::MAX_COLUMNS = T.let(T.unsafe(nil), Integer)

class String
  include ::Comparable
  include ::MakeMenu::Console::ColorString
end
